OBJECT Codeunit 50001 Celki Service Management
{
  OBJECT-PROPERTIES
  {
    Date=21/03/16;
    Time=16:21:21;
    Modified=Yes;
    Version List=ESG1.81,CELKI1.2,TEC1.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN

            // #015
            //TestPostAndInsertNewCarePlan;
            // #015

            //GeneratePMForRentalContForMiss;
            //GeneratePMForRentalCont;
            //InsertMissingCall1
            //DeleteDuplicateRecord;
            //g_frmPMSchedule.CheckPM();
          END;

  }
  CODE
  {
    VAR
      ServiceMgtSetup@1000000002 : Record 5911;
      SpecialOrderSetup@1000000011 : Record 50042;
      SpecialContractSetup@1000000021 : Record 50048;
      ContractHeader@1000000000 : Record 5965;
      ContractLine@1000000001 : Record 5964;
      ExistedContractLine@1000000003 : Record 5964;
      ServiceItem@1000000007 : Record 5940;
      WarrantyPackageTemplate@1000000006 : Record 50045;
      ServiceContractTemplate@1000000013 : Record 5968;
      Customer@1000000022 : Record 18;
      LocationRec@1000000035 : Record 14;
      ServiceDim@1000000019 : Record 389;
      ServiceDim2@1000000018 : Record 389;
      NoSeriesMgt@1000000014 : Codeunit 396;
      CelkiFunctions@1000000039 : Codeunit 50000;
      WarrantyPackageForm@1000000010 : Form 50046;
      NoOfServiceItemInOtherContract@1000000004 : Integer;
      TotalNoOfLines@1000000005 : Integer;
      ApplyWarranty@1000000008 : Boolean;
      LineNo@1000000009 : Integer;
      TempSVWarrantyTemplateNo@1000000012 : Code[20];
      CurrServiceItemGroup@1000000015 : Code[10];
      Text001@1000000016 : TextConst 'ENU="%1 of Service Contract is difference with the template from %2 to %3\ "';
      Text002@1000000017 : TextConst 'ENU=Do you want to make the change?';
      Text003@1000000020 : TextConst 'ENU=The new %1 %2 has been created with %3 contract line(s).';
      Text004@1000000023 : TextConst 'ENU=This function can only be exucuted for new contract.';
      Text005@1000000024 : TextConst 'ENU=Cannot find any warranty package.';
      Text006@1000000025 : TextConst 'ENU=This function can only be executed for Signed or Closed contract.';
      Text007@1000000026 : TextConst 'ENU=The new %1 %2 has been created with %3 Contract lines.';
      Text008@1000000027 : TextConst 'ENU=%1 Sales Order %2 is created.';
      Text009@1000000028 : TextConst 'ENU=This function can only be executed for Closed contract.';
      Text010@1000000029 : TextConst 'ENU=No Service Item Lines selected.';
      Text011@1000000030 : TextConst 'ENU=Process cancelled by the user.';
      Text012@1000000031 : TextConst 'ENU=This service Item %1 has already been created in Sales %2 %3.';
      Text013@1000000032 : TextConst 'ENU=Missing Location Code.';
      Text014@1000000036 : TextConst 'ENU=The item %1 (Service Item %2) must be a FA Item.';
      Text015@1000000033 : TextConst 'ENU=G/L Integration - Disposal must be set to True in Fixed Asset Setup.';
      Text016@1000000045 : TextConst 'ENU=Invalid Reason Code %1 for Service Contract Header 2.';
      Text017@1000000041 : TextConst 'ENU=%1 Sales Return Order %2 is created.';
      SpecialOrderType@1000000034 : Code[10];
      LocationCode@1000000037 : Code[10];
      SalespersonCode@1000000038 : Code[10];
      ServMgtSetup@1000000040 : Record 5911;
      ChangeContract@1000000042 : Boolean;
      RemoveContract@1000000043 : Boolean;
      RemoveLocation@1000000044 : Code[20];
      RentalToSales@1000000046 : Boolean;
      Text018@1000000047 : TextConst 'ENU=%1 %2 has been created already.';
      g_recSHSub@1000000048 : Record 50127;
      g_codBOMItem@1000000049 : Code[20];
      SalesToRental@1000000050 : Boolean;
      Text019@1000000051 : TextConst 'ENU=Do you want to create Sales Order with a new BOM Item?';
      g_recItem@1000000056 : Record 27;
      g_recServiceItemLine@1000000055 : Record 5901;
      g_recServItem@1000000054 : Record 5940;
      g_recServContractH@1000000053 : Record 5965;
      g_recSercConDim@1000000052 : Record 389;
      g_recSalesLine@1000000057 : Record 37;
      g_booPMSchedule@1000000058 : Boolean;
      g_recResource@1000000060 : Record 156;
      g_recDatabase@1000000059 : Record 2000000048;
      g_codcelkiSpecialFunc@1000000061 : Codeunit 50000;
      g_recOrderRelation@1000000062 : Record 50311;
      g_recServContFollowUp@1000000063 : Record 50328;
      g_recSalesInvHeader2@1000000064 : Record 112;
      g_recNewCarePlanSchFollowup@1000000065 : Record 50306;
      g_frmPMSchedule@1000000066 : Form 50538;

    PROCEDURE UpdateLineByTemplate@1000000000(VAR OrgContractLine@1000000000 : Record 5964);
    VAR
      TempDate@1000000001 : Date;
    BEGIN
      ContractHeader.GET(OrgContractLine."Contract Type", OrgContractLine."Contract No.");

      IF ContractHeader.Status > ContractHeader.Status::" " THEN
        ERROR(Text004);
      //#2 [START]
      //ContractHeader.TESTFIELD("Special Service Contract Type",'');
      //#2 [END]
      //ContractHeader.TESTFIELD("Special Service Contract Type");
      ContractHeader.TESTFIELD("Contract No.");
      ContractHeader.CALCFIELDS("Customer Price Group Code");

      Customer.GET(ContractHeader."Customer No.");

      ServiceItem.GET(OrgContractLine."Service Item No.");
      ServiceItem.CALCFIELDS("Current Active Contract No.");

      TempSVWarrantyTemplateNo := '';

      WarrantyPackageTemplate.SETRANGE("Service Item Group Code",ServiceItem."Service Item Group Code");
      WarrantyPackageTemplate.SETRANGE("Customer Price Group Code",ContractHeader."Customer Price Group Code");
      WarrantyPackageTemplate.SETRANGE("Business Type",Customer."Business Type");

      IF WarrantyPackageTemplate.FIND('-') THEN BEGIN
        WarrantyPackageForm.SETTABLEVIEW(WarrantyPackageTemplate);
        WarrantyPackageForm.SetFormProperty(TRUE);
        IF ACTION::LookupOK = WarrantyPackageForm.RUNMODAL THEN BEGIN
          ApplyWarranty:=TRUE;
          WarrantyPackageForm.ReturnTemplateNo(TempSVWarrantyTemplateNo);
        END;
      END ELSE
        ERROR(Text005);

      IF TempSVWarrantyTemplateNo <> '' THEN BEGIN
        ServiceContractTemplate.GET(TempSVWarrantyTemplateNo);

        WITH ContractHeader DO BEGIN
          IF (Prepaid <> ServiceContractTemplate.Prepaid) THEN
            IF NOT "Renewal Updated" THEN
              VALIDATE(Prepaid,ServiceContractTemplate.Prepaid)
            ELSE IF CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION(Prepaid), FORMAT(Prepaid),
                            FORMAT(ServiceContractTemplate.Prepaid)) + Text002)
            THEN
              VALIDATE(Prepaid,ServiceContractTemplate.Prepaid);

            IF ("Response Time (Hours)" <> ServiceContractTemplate."Default Response Time (Hours)") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Response Time (Hours)",ServiceContractTemplate."Default Response Time (Hours)")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Response Time (Hours)"),FORMAT("Response Time (Hours)"),
                        FORMAT(ServiceContractTemplate."Default Response Time (Hours)"))+Text002)
              THEN
                VALIDATE("Response Time (Hours)",ServiceContractTemplate."Default Response Time (Hours)");

            IF ("Service Period" <> ServiceContractTemplate."Default Service Period") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Service Period",ServiceContractTemplate."Default Service Period")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Service Period"),
                        FORMAT("Service Period"),FORMAT(ServiceContractTemplate."Default Service Period"))+Text002)
              THEN
                VALIDATE("Service Period",ServiceContractTemplate."Default Service Period");

            IF ("Payment Terms Code" <> ServiceContractTemplate."Payment Terms Code") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Payment Terms Code",ServiceContractTemplate."Payment Terms Code")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Payment Terms Code"),
                        "Payment Terms Code",ServiceContractTemplate."Payment Terms Code")+Text002)
              THEN
                VALIDATE("Payment Terms Code",ServiceContractTemplate."Payment Terms Code");

            IF NOT "Renewal Updated" THEN
              ContractHeader.Description := ServiceContractTemplate.Description;

            IF ("Allow Unbalanced Amounts" <> ServiceContractTemplate."Allow Unbalanced Amounts") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Allow Unbalanced Amounts",ServiceContractTemplate."Allow Unbalanced Amounts")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Allow Unbalanced Amounts"),FORMAT("Allow Unbalanced Amounts"),
                        FORMAT(ServiceContractTemplate.Prepaid))+Text002)
              THEN
                VALIDATE("Allow Unbalanced Amounts",ServiceContractTemplate."Allow Unbalanced Amounts");


            IF ("Detailed Ledger" <> ServiceContractTemplate."Detailed Ledger") THEN

              IF NOT "Renewal Updated" THEN
                VALIDATE("Detailed Ledger",ServiceContractTemplate."Detailed Ledger")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Detailed Ledger"),FORMAT("Detailed Ledger"),
                        FORMAT(ServiceContractTemplate."Detailed Ledger"))+Text002)
                THEN
                  VALIDATE("Detailed Ledger",ServiceContractTemplate."Detailed Ledger");

            IF ("Invoice after Service" <> ServiceContractTemplate."Invoice after Service") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Invoice after Service",ServiceContractTemplate."Invoice after Service")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Invoice after Service"),FORMAT("Invoice after Service"),
                        FORMAT(ServiceContractTemplate."Invoice after Service"))+Text002)
              THEN
                VALIDATE("Invoice after Service",ServiceContractTemplate."Invoice after Service");

            IF ("Combine Invoices" <> ServiceContractTemplate."Combine Invoices") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Combine Invoices",ServiceContractTemplate."Combine Invoices")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Combine Invoices"),FORMAT("Combine Invoices"),
                        FORMAT(ServiceContractTemplate."Combine Invoices"))+Text002)
              THEN
                VALIDATE("Combine Invoices",ServiceContractTemplate."Combine Invoices");


            IF ("Contract Lines on Invoice" <> ServiceContractTemplate."Contract Lines on Invoice") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Contract Lines on Invoice",ServiceContractTemplate."Contract Lines on Invoice")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Contract Lines on Invoice"),FORMAT("Contract Lines on Invoice"),
                        FORMAT(ServiceContractTemplate."Contract Lines on Invoice"))+Text002)
              THEN
                VALIDATE("Combine Invoices",ServiceContractTemplate."Contract Lines on Invoice");

            IF ("Contract Group Code" <> ServiceContractTemplate."Contract Group Code") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Contract Group Code",ServiceContractTemplate."Contract Group Code")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Contract Group Code"),"Contract Group Code",
                        ServiceContractTemplate."Contract Group Code")+Text002)
              THEN
                VALIDATE("Contract Group Code",ServiceContractTemplate."Contract Group Code");

            IF ("Service Order Type" <> ServiceContractTemplate."Service Order Type") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Service Order Type",ServiceContractTemplate."Service Order Type")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Service Order Type"),FORMAT("Service Order Type"),
                        FORMAT(ServiceContractTemplate."Service Order Type"))+Text002)
              THEN
                VALIDATE("Service Order Type",ServiceContractTemplate."Service Order Type");

            IF ("Automatic Credit Memos" <> ServiceContractTemplate."Automatic Credit Memos") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Automatic Credit Memos",ServiceContractTemplate."Automatic Credit Memos")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Automatic Credit Memos"),FORMAT("Automatic Credit Memos"),
                        FORMAT(ServiceContractTemplate."Automatic Credit Memos"))+Text002)
              THEN
                VALIDATE("Automatic Credit Memos",ServiceContractTemplate."Automatic Credit Memos");

            IF ("Serv. Contract Acc. Gr. Code" <> ServiceContractTemplate."Serv. Contract Acc. Gr. Code") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractTemplate."Serv. Contract Acc. Gr. Code")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Serv. Contract Acc. Gr. Code"),"Serv. Contract Acc. Gr. Code",
                        ServiceContractTemplate."Serv. Contract Acc. Gr. Code")+Text002)
              THEN
                VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractTemplate."Serv. Contract Acc. Gr. Code");

            IF (FORMAT(ServiceContractTemplate."Contract Period") <> '') THEN BEGIN
              TempDate := CALCDATE(FORMAT(ServiceContractTemplate."Contract Period")+'-1D',"Starting Date");
              IF ("Expiration Date" <> TempDate) THEN
                IF NOT "Renewal Updated" THEN
                  VALIDATE("Expiration Date",TempDate)
                ELSE IF
                  CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Expiration Date"),FORMAT("Expiration Date"),
                          FORMAT(TempDate))+Text002)
                THEN
                  VALIDATE("Expiration Date",TempDate);
          END;

          IF (FORMAT(ServiceContractTemplate."Invoice Period Formula") <> '') THEN
            IF ("Invoice Period Formula" <> ServiceContractTemplate."Invoice Period Formula") THEN
              IF NOT "Renewal Updated" THEN
                VALIDATE("Invoice Period Formula",ServiceContractTemplate."Invoice Period Formula")
              ELSE IF
                CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Invoice Period Formula"),FORMAT("Invoice Period Formula"),
                        FORMAT(ServiceContractTemplate."Invoice Period Formula"))+Text002)
              THEN
                VALIDATE("Invoice Period Formula",ServiceContractTemplate."Invoice Period Formula");

          //#8 [START]
          {
          IF ("Service Zone Code" <> ServiceContractTemplate."Service Zone Code") THEN
            IF NOT "Renewal Updated" THEN
              VALIDATE("Service Zone Code",ServiceContractTemplate."Service Zone Code")
            ELSE IF
              CONFIRM(STRSUBSTNO(Text001,FIELDCAPTION("Service Zone Code"),"Service Zone Code",
                      ServiceContractTemplate."Service Zone Code")+Text002)
            THEN
              VALIDATE("Service Zone Code",ServiceContractTemplate."Service Zone Code");
          }
          //#8 [END]

          IF NOT "Renewal Updated" THEN
            VALIDATE("Renewal Updated",TRUE);
         // #11
          "Template No.":=TempSVWarrantyTemplateNo;
         // #11
          MODIFY;
        END; //With

        OrgContractLine.GET(OrgContractLine."Contract Type",OrgContractLine."Contract No.",OrgContractLine."Line No.");
        IF OrgContractLine."Response Time (Hours)" <> ServiceContractTemplate."Default Response Time (Hours)" THEN
          OrgContractLine.VALIDATE("Response Time (Hours)",ServiceContractTemplate."Default Response Time (Hours)");
        IF ServiceContractTemplate."Default Service Period" <> OrgContractLine."Service Period" THEN
          OrgContractLine.VALIDATE("Service Period",ServiceContractTemplate."Default Service Period");
        OrgContractLine.VALIDATE("Warranty for Labour",ServiceContractTemplate."Warranty For Labour");
        OrgContractLine.VALIDATE("Warranty for Parts",ServiceContractTemplate."Warranty For Parts");
        OrgContractLine.VALIDATE("Warranty Discount (Parts %)",ServiceContractTemplate."Warranty Disc. % (Parts)");
        OrgContractLine.VALIDATE("Warranty Discount (Labour %)",ServiceContractTemplate."Warranty Disc. % (Labor)");
        OrgContractLine.VALIDATE("Line Value",ServiceContractTemplate."Contract Value Amount");
        OrgContractLine.VALIDATE("Contract Expiration Date",ContractHeader."Expiration Date");
        OrgContractLine."Special Offer":=ServiceContractTemplate."Special Offer";
        OrgContractLine."Special Offer Description":=ServiceContractTemplate."Special Offer Description";
        OrgContractLine.MODIFY;

        ContractHeader.UpdateContractAmount;
        ContractHeader.MODIFY;
      END;
    END;

    PROCEDURE CopyFiledSVContract@1000000001(FiledServiceHeader@1000000000 : Record 5970);
    VAR
      TempDate@1000000001 : Date;
      FiledContractLine@1000000002 : Record 5971;
    BEGIN
      IF FiledServiceHeader.Status < FiledServiceHeader.Status::Signed THEN
        ERROR(Text006);

      FiledServiceHeader.TESTFIELD("Contract No.");

      ServiceMgtSetup.GET;

      ContractHeader.LOCKTABLE;
      ContractLine.LOCKTABLE;

      ContractHeader.INIT;
      ContractHeader.TRANSFERFIELDS(FiledServiceHeader,FALSE);
      ContractHeader."Contract Type":=ContractHeader."Contract Type"::Contract;

      //Get Contract No. according to Special Type.
      ContractHeader."Special Service Contract Type" := FiledServiceHeader."Special Contract Type";
      IF ContractHeader."Special Service Contract Type" = '' THEN BEGIN
        ServiceMgtSetup.TESTFIELD("Service Contract Nos.");
        ContractHeader."Contract No." := NoSeriesMgt.GetNextNo(ServiceMgtSetup."Service Contract Nos.",WORKDATE,TRUE);
      END ELSE BEGIN
        SpecialContractSetup.GET(ContractHeader."Special Service Contract Type");
        SpecialContractSetup.TESTFIELD("Contract No. Series");
        ContractHeader."Contract No." := NoSeriesMgt.GetNextNo(SpecialContractSetup."Contract No. Series",WORKDATE,TRUE);
      END;

      ContractHeader.Status := ContractHeader.Status::" ";
      ContractHeader."Change Status" := ContractHeader."Change Status"::Open;
      TempDate := ContractHeader."Expiration Date";
      ContractHeader.VALIDATE("Last Invoice Date",0D);
      ContractHeader.VALIDATE("Expiration Date",0D);
      ContractHeader.VALIDATE("Cancel Reason Code",'');
      ContractHeader.VALIDATE("Starting Date",CALCDATE('1D',TempDate));
      ContractHeader.VALIDATE("Renewal Updated",FALSE);
      ContractHeader.VALIDATE("Template No.");
      ContractHeader.INSERT;

      //Copy Service contract lines
      NoOfServiceItemInOtherContract := 0;
      TotalNoOfLines := 0;
      LineNo := 0;
      FiledContractLine.RESET;
      FiledContractLine.SETRANGE("Contract Type", FiledServiceHeader."Contract Type");
      FiledContractLine.SETRANGE("Contract No.", FiledServiceHeader."Contract No.");
      IF FiledContractLine.FIND('-') THEN
        REPEAT
          ServiceItem.GET(FiledContractLine."Service Item No.");
          ServiceItem.CALCFIELDS("Current Active Contract No.");
          IF ServiceItem."Current Active Contract No." <> '' THEN
            NoOfServiceItemInOtherContract := NoOfServiceItemInOtherContract + 1
          ELSE BEGIN
            ContractLine.INIT;
            LineNo := LineNo + 10000;
            ContractLine."Contract Type" := ContractHeader."Contract Type";
            ContractLine."Contract No." := ContractHeader."Contract No.";
            ContractLine."Line No." := LineNo;
            ContractLine.TRANSFERFIELDS(FiledContractLine,FALSE);
            ContractLine."Contract Status" := ContractHeader.Status;
            ContractLine."Customer No." := ContractHeader."Customer No.";
            ContractLine."Ship-to Code" := ContractHeader."Ship-to Code";
            ContractLine.VALIDATE("Starting Date", ContractHeader."Starting Date");
            ContractLine.VALIDATE("Contract Expiration Date", ContractHeader."Expiration Date");
            ContractLine."Suspend PM Service" := FALSE;
            ContractLine."Date Suspend PM Service" := 0D;
            ContractLine.VALIDATE("Next Planned Service Date", 0D);
            ContractLine.VALIDATE("New Line", TRUE);
            ContractLine.INSERT;
          END;
          TotalNoOfLines := TotalNoOfLines + 1;
        UNTIL FiledContractLine.NEXT = 0;

        MESSAGE(Text007,FORMAT(ContractHeader."Contract Type"), ContractHeader."Contract No.", FORMAT(LineNo/10000));
    END;

    PROCEDURE CopyExistContract@1000000003(ServiceContractHeader@1000000000 : Record 5965);
    VAR
      TempDate@1000000001 : Date;
      ServDim1@1000000002 : Record 389;
      ServDim2@1000000003 : Record 389;
      l_recServContFollow@1000000006 : Record 50320;
      l_recServContFollowD@1000000005 : Record 50328;
      l_recServContFollowD2@1000000004 : Record 50328;
      l_perferNextCallDate@1000000008 : Date;
      l_recServContFollow2@1000000007 : Record 50320;
    BEGIN
      //CopyExistContract

      IF ServiceContractHeader.Status < ServiceContractHeader.Status::Canceled THEN
        ERROR(Text009);

      ServiceContractHeader.TESTFIELD("Contract No.");

      ServiceMgtSetup.GET;

      ContractHeader.LOCKTABLE;
      ContractLine.LOCKTABLE;

      ContractHeader.INIT;
      ContractHeader.TRANSFERFIELDS(ServiceContractHeader,FALSE);
      ContractHeader.Prepaid := FALSE; //#9
      ContractHeader."Skip First Invoice" := FALSE; //#9
      ContractHeader."Contract Type" := ServiceContractHeader."Contract Type";
      ContractHeader."Special Service Contract Type" := ServiceContractHeader."Special Service Contract Type";

      //Get Contract No. according to Special Type.
      IF ContractHeader."Special Service Contract Type" = '' THEN BEGIN
        ServiceMgtSetup.TESTFIELD("Service Contract Nos.");
        ContractHeader."Contract No." := NoSeriesMgt.GetNextNo(ServiceMgtSetup."Service Contract Nos.",WORKDATE,TRUE);
      END
      ELSE BEGIN
        SpecialContractSetup.GET(ContractHeader."Special Service Contract Type");
        SpecialContractSetup.TESTFIELD("Contract No. Series");
        ContractHeader."Contract No." := NoSeriesMgt.GetNextNo(SpecialContractSetup."Contract No. Series",WORKDATE,TRUE);
      END;

      ContractHeader.Status := ContractHeader.Status::" ";
      ContractHeader."Change Status" := ContractHeader."Change Status"::Open;
      TempDate := ContractHeader."Expiration Date";
      ContractHeader.VALIDATE("Last Invoice Date",0D);
      ContractHeader.VALIDATE("Expiration Date",0D);
      ContractHeader.VALIDATE("Cancel Reason Code",'');
      ContractHeader.VALIDATE("Starting Date",CALCDATE('1D',TempDate));
      ContractHeader.VALIDATE("Renewal Updated",FALSE);
      ContractHeader.VALIDATE("Template No.");
      ContractHeader.VALIDATE("Old Reference No.",ServiceContractHeader."Contract No.");
      ContractHeader.INSERT;

      //#1 [START]
      ServiceDim.RESET;
      ServiceDim.SETRANGE("Table ID", DATABASE::"Service Contract Header");
      ServiceDim.SETRANGE(Type, ServiceContractHeader."Contract Type");
      ServiceDim.SETRANGE("No.", ServiceContractHeader."Contract No.");
      IF ServiceDim.FIND('-') THEN
        REPEAT
          ServiceDim2.INIT;
          ServiceDim2."Table ID" := DATABASE::"Service Contract Header";
          ServiceDim2.Type := ContractHeader."Contract Type";
          ServiceDim2."No." := ContractHeader."Contract No.";
          ServiceDim2."Line No." := ServiceDim."Line No.";
          ServiceDim2."Dimension Code" := ServiceDim."Dimension Code";
          ServiceDim2."Dimension Value Code" := ServiceDim."Dimension Value Code";
          //hello
          //ServiceDim2.INSERT;
          IF ServiceDim2.INSERT THEN;
        UNTIL ServiceDim.NEXT = 0;
      //#1 [END]

      //Copy Service contract lines
      NoOfServiceItemInOtherContract := 0;
      TotalNoOfLines := 0;
      LineNo:=0;
      ExistedContractLine.RESET;
      ExistedContractLine.SETRANGE("Contract Type",ServiceContractHeader."Contract Type");
      ExistedContractLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ExistedContractLine.SETFILTER("Service Item No.", '<>%1', ''); //#6
      IF ExistedContractLine.FIND('-') THEN
        REPEAT
          ServiceItem.GET(ExistedContractLine."Service Item No.");
          ServiceItem.CALCFIELDS("Current Active Contract No.");
          IF ServiceItem."Current Active Contract No." <> '' THEN
            NoOfServiceItemInOtherContract := NoOfServiceItemInOtherContract + 1
          ELSE BEGIN
            //#7 [START]
            ServiceItem."Sales Order No." := '';
            ServiceItem."Special Order Type" := '';
            ServiceItem."Location Ref." := 'RENEW';
            ServiceItem.fn_BypassServItemLineChecking;    //#002
            ServiceItem.VALIDATE("Customer No.", ContractHeader."Customer No.");
            ServiceItem.VALIDATE("Ship-to Code", ContractHeader."Ship-to Code");//Alex Update Ship to code in Service item
            ServiceItem.MODIFY(TRUE);
            //#7 [END]

            ContractLine.INIT;
            LineNo:= LineNo + 10000;
            ContractLine."Contract Type":=ContractHeader."Contract Type";
            ContractLine."Contract No.":=ContractHeader."Contract No.";
            ContractLine."Line No.":=LineNo;
            ContractLine.TRANSFERFIELDS(ExistedContractLine,FALSE);
            ContractLine."Contract Status":=ContractHeader.Status;
            ContractLine."Customer No.":=ContractHeader."Customer No.";
            ContractLine."Ship-to Code":=ContractHeader."Ship-to Code";
            ContractLine.VALIDATE("Starting Date",ContractHeader."Starting Date");
            //#004 <<
            //ContractLine.VALIDATE("Contract Expiration Date",ContractHeader."Expiration Date");
            ContractLine."Contract Expiration Date" := 0D;
            ContractLine."Credit Memo Date" := 0D;
            //#004 >>
            ContractLine.VALIDATE("New Line",TRUE);
            ContractLine."Suspend PM Service":=FALSE;
            ContractLine."Date Suspend PM Service":=0D;
            //ContractLine.VALIDATE("Next Planned Service Date",0D);
            ContractLine.VALIDATE("New Line",TRUE);
            ContractLine."Last Preventive Maint. Date" := 0D; //#3
            ContractLine."Last Planned Service Date" := 0D; //#3
            ContractLine.INSERT;

            //Alex

            IF g_booPMSchedule THEN
            BEGIN
              l_recServContFollow.RESET;
              l_recServContFollow.INIT;
              l_recServContFollow.TRANSFERFIELDS(ContractLine);
              l_recServContFollow.INSERT(TRUE);

              l_recServContFollow.RESET;
              l_recServContFollow.SETRANGE("Contract No." ,ExistedContractLine."Contract No.");
              l_recServContFollow.SETRANGE("Service Item No." , ExistedContractLine."Service Item No.");
              IF l_recServContFollow.FINDFIRST THEN
              BEGIN
                l_recServContFollow."Service Zone Code" := ContractHeader."Service Zone Code";
                l_recServContFollow.MODIFY;
                //2015-05-05 Added by Kenny - Start
                //Clear and init the fake date to get the latest Preferred Next Call Date
                CLEAR(l_perferNextCallDate);
                l_perferNextCallDate := 31122099D;
                //2015-05-05 Added by Kenny - End
                REPEAT
                  l_recServContFollowD.RESET;
                  l_recServContFollowD.SETRANGE("Contract No." , ExistedContractLine."Contract No.");
                  l_recServContFollowD.SETRANGE("Contract Line No." , l_recServContFollow."Line No.");
                  IF l_recServContFollowD.FINDFIRST THEN
                  BEGIN
                    REPEAT
                      IF l_recServContFollowD2.GET(ExistedContractLine."Contract No.",l_recServContFollowD."Contract Line No.",
                                                 l_recServContFollowD."Excepted PM Date") THEN BEGIN
                        l_recServContFollowD2.RENAME(ContractLine."Contract No.",ContractLine."Line No.",
                                                  l_recServContFollowD."Excepted PM Date");
                      //2015-05-05 Added by Kenny - Start
                        IF (l_perferNextCallDate > l_recServContFollowD2."Prefered Next Call Date")
                            AND (l_recServContFollowD2."Prefered Next Call Date" <> 0D) THEN BEGIN
                          l_perferNextCallDate := l_recServContFollowD2."Prefered Next Call Date";
                          l_recServContFollow2.RESET;
                          l_recServContFollow2.SETFILTER("Contract No." , ContractLine."Contract No.");
                          l_recServContFollow2.SETFILTER("Service Item No." , ContractLine."Service Item No.");
                          IF l_recServContFollow2.FINDFIRST THEN BEGIN
                            l_recServContFollow2."Prefered Next Call Date" := l_perferNextCallDate;
                            l_recServContFollow2.MODIFY;
                          END;
                        END;
                      END;
                      //2015-05-05 Added by Kenny - End
                    UNTIL l_recServContFollowD.NEXT = 0;
                  END;
                UNTIL l_recServContFollow.NEXT = 0;
                //l_recServContFollow.DELETE;
             END;
            END;
            //Alex


            ServDim1.SETRANGE("Table ID", DATABASE::"Service Contract Line");
            ServDim1.SETRANGE(Type, ServDim1.Type::Contract);
            ServDim1.SETRANGE("No.", ExistedContractLine."Contract No.");
            ServDim1.SETRANGE("Line No.", ExistedContractLine."Line No.");
            IF ServDim1.FIND('-') THEN
              REPEAT
                ServDim2.INIT;
                ServDim2 := ServDim1;
                ServDim2."No." := ContractLine."Contract No.";
                ServDim2."Line No." := ContractLine."Line No.";
                ServDim2.INSERT;
              UNTIL ServDim1.NEXT = 0;
          END;
          TotalNoOfLines := TotalNoOfLines + 1;
        UNTIL ExistedContractLine.NEXT = 0;

      CarryOldServOrder(ServiceContractHeader."Contract No.",ContractHeader."Contract No.");      //#002

      MESSAGE(Text003, FORMAT(ContractHeader."Contract Type"), ContractHeader."Contract No.", FORMAT(LineNo/10000));
    END;

    PROCEDURE CreateSalesFromServiceOrders@1000000004(VAR TempServiceItemLine@1000000000 : Record 5901;IsOrder@1000000004 : Boolean;NewOrderDate@1000000003 : Date;CreateSalesLine@1000000002 : Boolean;PredefinedType@1000000001 : Code[10]) : Code[20];
    VAR
      ServiceOrderSetup@1000000024 : Record 50047;
      ServiceHeader@1000000020 : Record 5900;
      SalesHeader@1000000019 : Record 36;
      SalesHeader2@1000000010 : Record 36;
      SalesLine@1000000018 : Record 37;
      ServiceItemLine@1000000006 : Record 5901;
      CurrExchRate@1000000015 : Record 330;
      ServDim@1000000009 : Record 357;
      SalesDim@1000000008 : Record 357;
      DimMgt@1000000014 : Codeunit 408;
      LocationList@1000000005 : Form 15;
      SalesLineNo@1000000016 : Integer;
      StringOption@1000000022 : Text[250];
      OptionText@1000000021 : Code[10];
      Selection@1000000007 : Integer;
      RelatedSONo@1000000011 : Code[20];
    BEGIN
      //CreateSalesFromServiceOrders

      ServiceItemLine.RESET;

      RelatedSONo := '';
      IF TempServiceItemLine.FIND('-') THEN BEGIN
        ServiceItem.GET(TempServiceItemLine."Service Item No.");
        ServiceItem.CALCFIELDS("Current Active Contract No.");
        IF ServiceItem."Current Active Contract No." <> '' THEN BEGIN
          IF ContractHeader.GET(ContractHeader."Contract Type"::Contract, ServiceItem."Current Active Contract No.") THEN
            RelatedSONo := ContractHeader."Sales Order No.";
        END;
        REPEAT
          //Alex -- Error Message for Different Contract no.
          ServiceItem.CALCFIELDS("Current Active Contract No.");

          IF ServiceItem."Current Active Contract No." <> TempServiceItemLine."Contract No." THEN
            ERROR('The %1 Item is not the same Contract No. with pervious.' , TempServiceItemLine."Service Item No.");

          ServiceItemLine.GET(TempServiceItemLine."Document Type",TempServiceItemLine."Document No.",TempServiceItemLine."Line No.");
          ServiceItemLine.MARK(TRUE);
        UNTIL TempServiceItemLine.NEXT = 0;
      END;

      ServiceItemLine.MARKEDONLY(TRUE);
      IF NOT ServiceItemLine.FIND('-') THEN
        ERROR(Text010);

      IF (ServiceItemLine."Sales Order No." <> '') AND (PredefinedType <> 'LOANER') THEN
        IF SalesHeader2.GET(ServiceItemLine."Sales Order Type",ServiceItemLine."Sales Order No.") THEN
          ERROR(Text012, ServiceItemLine."Service Item No.", FORMAT(SalesHeader2."Document Type"), SalesHeader2."No.");

      //********** [1] Retrieve Setup data and Order Type Selection
      ServiceHeader.GET(ServiceItemLine."Document Type", ServiceItemLine."Document No.");
      ServiceOrderSetup.GET(ServiceHeader."Special Order Type");

      IF PredefinedType <> '' THEN
        SpecialOrderType := PredefinedType
      ELSE
      IF ServiceOrderSetup."Allow Multiple Order Type" THEN BEGIN
        StringOption := '';
        SpecialOrderSetup.SETRANGE("Source Type", SpecialOrderSetup."Source Type"::Sales);
        IF IsOrder THEN
          SpecialOrderSetup.SETRANGE("Document Type", SpecialOrderSetup."Document Type"::Order)
        ELSE
          SpecialOrderSetup.SETRANGE("Document Type", SpecialOrderSetup."Document Type"::"Return Order");
        IF SpecialOrderSetup.FIND('-') THEN
          REPEAT
            IF NOT SpecialOrderSetup."Exclude from Order Selection" THEN BEGIN
              IF SpecialOrderSetup."Special Order Type" = '' THEN
                OptionText := 'NORMAL';

              IF StringOption <> '' THEN
                StringOption := StringOption + ',' + SpecialOrderSetup."Special Order Type"
              ELSE
                StringOption := SpecialOrderSetup."Special Order Type";
            END;
          UNTIL SpecialOrderSetup.NEXT = 0;
          Selection := STRMENU(StringOption);
          IF Selection <> 0 THEN
            SpecialOrderType := SELECTSTR(Selection, StringOption)
          ELSE
            ERROR(Text011);
      END;

      IF SpecialOrderType = '' THEN
        IF IsOrder THEN
          SpecialOrderType := ServiceOrderSetup."Sales Order Special Type"
        ELSE
          SpecialOrderType := ServiceOrderSetup."Return Order Special Type";

      //********** [2] Location Selection
      IF PredefinedType <> 'EXCHANGE' THEN
      BEGIN
        CLEAR(LocationList);
        LocationList.CAPTION:='Select Location';
        LocationList.LOOKUPMODE := TRUE;
        LocationList.EDITABLE := FALSE;
        IF LocationList.RUNMODAL = ACTION::LookupOK THEN
           LocationList.GETRECORD(LocationRec)
        ELSE
           ERROR(Text013);
      END;
      //********** [3] Create Sales Order Header
      SalesHeader.INIT;
      SalesHeader.SetHideValidationDialog(TRUE);
      IF IsOrder THEN
        SalesHeader."Document Type" := SalesHeader."Document Type"::Order
      ELSE
        SalesHeader."Document Type" := SalesHeader."Document Type"::"Return Order";
      SalesHeader.VALIDATE("Special Order Type", SpecialOrderType);
      SalesHeader.INSERT(TRUE);

      SpecialOrderSetup.GET(SpecialOrderSetup."Source Type"::Sales, SalesHeader."Document Type", SalesHeader."Special Order Type");

      SalesHeader."Order Date" := NewOrderDate;
      SalesHeader.VALIDATE("Posting Date", NewOrderDate);
      SalesHeader.VALIDATE("Document Date", NewOrderDate);
      SalesHeader.VALIDATE("Shipment Date", NewOrderDate);
      SalesHeader."Posting Description" := FORMAT(SalesHeader."Document Type") + ' ' + SalesHeader."No.";
      SalesHeader.VALIDATE("Sell-to Customer No.", ServiceHeader."Customer No.");
      SalesHeader.VALIDATE("Bill-to Customer No.", ServiceHeader."Customer No.");
      IF PredefinedType <> 'EXCHANGE' THEN
        SalesHeader."Location Code" := LocationRec.Code
      ELSE
          SalesHeader."Location Code" := 'PPT';

      SalesHeader."Related Sales Order No." := RelatedSONo;

      Customer.GET(SalesHeader."Sell-to Customer No.");
      //#001 <<
      //Customer.TESTFIELD(Blocked,FALSE);
      Customer.TESTFIELD(Blocked,0);
      //#001 >>
      Customer.TESTFIELD("Gen. Bus. Posting Group");

      SalesHeader."Sell-to Customer Name" := Customer.Name;
      SalesHeader."Sell-to Customer Name 2" := Customer."Name 2";
      SalesHeader."Sell-to Address" := Customer.Address;
      SalesHeader."Sell-to Address 2" := Customer."Address 2";
      SalesHeader."Sell-to City" := Customer.City;
      SalesHeader."Sell-to Post Code" := Customer."Post Code";
      SalesHeader."Sell-to County" := Customer.County;
      SalesHeader."Sell-to Country/Region Code" := Customer."Country/Region Code";
      SalesHeader."Sell-to Contact" := Customer.Contact;
      SalesHeader.VALIDATE("Ship-to Code",ServiceHeader."Ship-to Code");
      SalesHeader."Gen. Bus. Posting Group" := Customer."Gen. Bus. Posting Group";
      SalesHeader."VAT Bus. Posting Group" := Customer."VAT Bus. Posting Group";
      SalesHeader."Currency Code" := ServiceHeader."Currency Code";
      SalesHeader."Currency Factor" := CurrExchRate.ExchangeRate(SalesHeader."Posting Date",SalesHeader."Currency Code");
      SalesHeader."Your Reference" := ServiceHeader."Your Reference";

      //Alex #01 Insert dimension value with Active Contract
      IF SpecialOrderType = 'LOANER' THEN //Alex Add Service Contract No. for Loaner Order
        SalesHeader."Service Contract No." := ServiceItemLine."Contract No.";

      g_recServItem.RESET;
      g_recServItem.SETRANGE("No." , ServiceItemLine."Service Item No.");
      IF g_recServItem.FINDFIRST THEN
      BEGIN
        g_recServContractH.RESET;
        g_recServItem.CALCFIELDS("Current Active Contract No.");
        //g_recServItem.CALCFIELDS("Previous Contract No.");
        IF g_recServItem."Current Active Contract No." <> '' THEN
          g_recServContractH.SETRANGE("Contract No." , g_recServItem."Current Active Contract No.")
        ELSE IF g_recServItem."Previous Contract No." <> '' THEN
          g_recServContractH.SETRANGE("Contract No." , g_recServItem."Previous Contract No.");
        IF g_recServContractH.FINDFIRST THEN
        BEGIN
          IF SpecialOrderType = 'EXCHANGE' THEN
            SalesHeader.VALIDATE("Salesperson Code",'NA')
          ELSE
            SalesHeader."Salesperson Code" := g_recServContractH."Salesperson Code";
          SalesHeader."Shortcut Dimension 1 Code" := g_recServContractH."Shortcut Dimension 1 Code";
          SalesHeader."Shortcut Dimension 2 Code" := g_recServContractH."Shortcut Dimension 2 Code";
        END;
      END;

      SalesHeader."Service Order No." := ServiceHeader."No.";
      SalesHeader."Service Order Doc. Type" := ServiceHeader."Document Type";
      SalesHeader."Service Order Order Type" := ServiceHeader."Special Order Type";
      IF ServiceHeader."Contract No." <>'' THEN
        SalesHeader."Service Contract No." := ServiceHeader."Contract No.";

      SalesHeader.MODIFY;

      //DimMgt.DeleteDocDim(DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",0);
      g_recSercConDim.RESET;
      g_recSercConDim.SETRANGE("Table ID",DATABASE::"Service Contract Header");
      g_recSercConDim.SETRANGE(Type , g_recServContractH."Contract Type");
      g_recSercConDim.SETRANGE("No." , g_recServContractH."Contract No.");
      g_recSercConDim.SETRANGE("Line No." , 0);
      IF g_recSercConDim.FINDFIRST THEN
       REPEAT
          SalesDim.INIT;
          SalesDim."Table ID" := DATABASE::"Sales Header";
          SalesDim."Document Type" := SalesHeader."Document Type";
          SalesDim."Document No." := SalesHeader."No.";
          SalesDim."Line No." := 0;
          SalesDim."Dimension Code" := g_recSercConDim."Dimension Code";
          SalesDim."Dimension Value Code" := g_recSercConDim."Dimension Value Code";
          IF NOT SalesDim.INSERT THEN
            SalesDim.MODIFY;
        UNTIL g_recSercConDim.NEXT = 0;
      {
      ServDim.SETRANGE("Table ID",DATABASE::"Service Header");
      ServDim.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServDim.SETRANGE("Document No.",ServiceHeader."No.");
      ServDim.SETRANGE("Line No.",0);
      IF ServDim.FIND('-') THEN
        REPEAT
          SalesDim.INIT;
          SalesDim."Table ID" := DATABASE::"Sales Header";
          SalesDim."Document Type" := SalesHeader."Document Type";
          SalesDim."Document No." := SalesHeader."No.";
          SalesDim."Line No." := 0;
          SalesDim."Dimension Code" := ServDim."Dimension Code";
          SalesDim."Dimension Value Code" := ServDim."Dimension Value Code";
          IF NOT SalesDim.INSERT THEN
            SalesDim.MODIFY;
        UNTIL ServDim.NEXT = 0;
      }
      //********** [4] Create Sales Order Lines
      IF CreateSalesLine THEN BEGIN
        SalesLineNo := 0;
        REPEAT
          IF (ServiceItemLine."Sales Order No." <> '') AND (SpecialOrderType <> 'LOANER') THEN
            IF SalesHeader2.GET(ServiceItemLine."Sales Order Type",ServiceItemLine."Sales Order No.") THEN
              ERROR(Text012, ServiceItemLine."Service Item No.", FORMAT(SalesHeader2."Document Type"), SalesHeader2."No.");

          IF SpecialOrderType <> 'LOANER' THEN
          BEGIN
            ServiceItemLine."Sales Order Type" := SalesHeader."Document Type";
            ServiceItemLine."Sales Order No." := SalesHeader."No.";
            ServiceItemLine."Special Sales Order Type" := SalesHeader."Special Order Type";
            ServiceItemLine.MODIFY;
          END;
          SalesLine.RESET;
          SalesLine.SETRANGE("Document No." ,  SalesHeader."No.");
          SalesLine.SETRANGE("No." , ServiceItemLine."Item No.");
          //IF (SpecialOrderType <> 'DELIVERY') OR NOT (SalesLine.FINDFIRST) THEN
          IF NOT (SalesLine.FINDFIRST) THEN
          BEGIN

            SalesLine.INIT;
            SalesLine."Document Type" := SalesHeader."Document Type";
            SalesLine."Document No." := SalesHeader."No.";
            SalesLineNo := SalesLineNo + 10000;
            SalesLine."Line No." := SalesLineNo;
            SalesLine.VALIDATE("Sell-to Customer No.", SalesHeader."Sell-to Customer No.");
            SalesLine.VALIDATE(Type, SalesLine.Type::Item);
            SalesLine.fn_BypassUpdate();
            IF (SpecialOrderType = 'LOANER') THEN
              SalesLine.VALIDATE("No.", ServiceItemLine."Item No."+'F')
            ELSE
              SalesLine.VALIDATE("No.", ServiceItemLine."Item No.");

            SalesLine.VALIDATE("Location Code", SalesHeader."Location Code");
            IF (SpecialOrderType <> 'EXCHANGE') THEN
            BEGIN

              IF SalesHeader."Location Code" = '' THEN
                SalesLine.VALIDATE("Location Code", SpecialOrderSetup."Default Location Code")
              ELSE
                SalesLine.VALIDATE("Location Code", SalesHeader."Location Code");
            END;
            //#EXCHANGE
            IF (SpecialOrderType = 'EXCHANGE') THEN
            BEGIN
              SalesLine.VALIDATE("Location Code", 'PPT');
              SalesLine.VALIDATE(Quantity, -1);
            END
            ELSE
              SalesLine.VALIDATE(Quantity, 1);

            SalesLine."Shipment Date" := SalesHeader."Shipment Date";

            //Alex #01 Insert dimension value with Active Contract
            SalesLine."Shortcut Dimension 1 Code" := SalesHeader."Shortcut Dimension 1 Code";
            SalesLine."Shortcut Dimension 2 Code" := SalesHeader."Shortcut Dimension 2 Code";

            SalesLine."Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
            IF (SpecialOrderType <> 'LOANER') THEN
            BEGIN
              SalesLine."Service Order No." := ServiceItemLine."Document No.";
              SalesLine."Service Item No." := ServiceItemLine."Service Item No.";
            END;
            SalesLine.VALIDATE("Unit Cost (LCY)",ABS(GetUnitCost(ServiceItemLine)));    //#008
            SalesLine.INSERT(TRUE);

            //********** [5] Item Tracking Information
            IF NOT((SpecialOrderType = 'DELIVERY') OR (SpecialOrderType = 'LOANER')) THEN BEGIN //Alex
              IF ServiceItemLine."Serial No." <> '' THEN BEGIN
                InsertSalesItemTracking(SalesLine, ServiceItemLine."Item No.", ServiceItemLine."Serial No.",
                                        ServiceItemLine."Vendor Serial No.");
              END;
            END;
            //********** [6] Extra Sales Line for EXCHANGE Orders
            IF (SpecialOrderType = 'EXCHANGE') THEN BEGIN
              SalesLineNo += 10000;
              CopyExchangeSalesLine(SalesLine, SpecialOrderSetup."Default Location Code", SalesLineNo);
            END;
          END
          ELSE
          BEGIN
            SalesLine.VALIDATE(Quantity, SalesLine.Quantity+1);
            SalesLine.MODIFY;
          END;

        UNTIL ServiceItemLine.NEXT = 0;
      END;

      ServiceHeader."Created Sales Order No." := SalesHeader."No.";
      ServiceHeader."Created Sales Order Doc. Type" := SalesHeader."Document Type";
      ServiceHeader."Created Sales Order Order Type" := SalesHeader."Special Order Type";
      ServiceHeader.MODIFY;

      EXIT(SalesHeader."No.");
    END;

    PROCEDURE InsertSalesItemTracking@1000000006(VAR SalesLine@1000000000 : Record 37;ItemNo@1000000006 : Code[20];SerialNo@1000000007 : Code[20];VendorSerialNo@1000000008 : Code[20]);
    VAR
      TrackingSpecification@1000000003 : Record 336;
      ReservEntry@1000000002 : Record 337;
      LastEntryNo@1000000004 : Integer;
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Entry No.":=0;
      TrackingSpecification.VALIDATE("Item No.", ItemNo);
      TrackingSpecification.VALIDATE("Location Code", SalesLine."Location Code");
      TrackingSpecification.VALIDATE("Creation Date", SalesLine."Shipment Date");
      TrackingSpecification.VALIDATE("Source Type", 37);
      TrackingSpecification.VALIDATE("Source Subtype", SalesLine."Document Type");
      TrackingSpecification.VALIDATE("Source ID", SalesLine."Document No.");
      TrackingSpecification.VALIDATE("Source Ref. No.", SalesLine."Line No.");
      TrackingSpecification.VALIDATE("Serial No.", SerialNo);
      TrackingSpecification.VALIDATE("Vendor Serial No.", VendorSerialNo);
      TrackingSpecification.VALIDATE("Quantity (Base)", SalesLine.Quantity);
      CelkiFunctions.ResolveWarrantyDates(TrackingSpecification);

      IF ReservEntry.FIND('+') THEN
        LastEntryNo := ReservEntry."Entry No."
      ELSE
        LastEntryNo := 0;

      ReservEntry.INIT;
      ReservEntry.TRANSFERFIELDS(TrackingSpecification);
      ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Surplus;
      ReservEntry."Quantity Invoiced (Base)" := 0;
      IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN
        ReservEntry.VALIDATE("Quantity (Base)", -TrackingSpecification."Quantity (Base)")
      ELSE
        ReservEntry.VALIDATE("Quantity (Base)", TrackingSpecification."Quantity (Base)");
      ReservEntry.Positive := (ReservEntry."Quantity (Base)" > 0);
      ReservEntry."Entry No." := LastEntryNo + 1;
      ReservEntry.INSERT;

      LastEntryNo := ReservEntry."Entry No.";
    END;

    PROCEDURE CopyExchangeSalesLine@1000000005(VAR SalesLine@1000000000 : Record 37;LocationCode@1000000001 : Code[10];NewLineNo@1000000002 : Integer);
    VAR
      NewSalesLine@1000000003 : Record 37;
    BEGIN
      NewSalesLine.INIT;
      NewSalesLine := SalesLine;
      NewSalesLine."Line No." := NewLineNo;
      NewSalesLine.fn_BypassUpdate(); //Alex
      NewSalesLine.VALIDATE("No.", SalesLine."No.");
      NewSalesLine.VALIDATE("Location Code", LocationCode);
      NewSalesLine.VALIDATE(Quantity, -NewSalesLine.Quantity);
      NewSalesLine."Exchange with Service Item No." := SalesLine."Service Item No.";
      NewSalesLine.VALIDATE("Unit Cost (LCY)",ABS(SalesLine."Unit Cost (LCY)"));       //#008
      NewSalesLine.INSERT(TRUE);
    END;

    PROCEDURE ProcessRentalToSales@1000000007(VAR TempContractLine@1000000000 : Record 5964;TerminationDate@1000000006 : Date);
    VAR
      Item@1000000001 : Record 27;
      FaSetup@1000000002 : Record 5603;
      DeptBook@1000000003 : Record 5611;
      ServiceItem@1000000005 : Record 5940;
      SellFAItemReport@1000000004 : Report 50012;
      CustomerNo@1000000008 : Code[20];
    BEGIN
      //ProcessRentalToSales

      //********** [1] Check all Service Items must be of "FA Item"
      IF TempContractLine.FIND('-') THEN BEGIN
        CustomerNo := TempContractLine."Customer No.";
        REPEAT
          Item.GET(TempContractLine."Item No.");
          IF NOT Item."FA Item" THEN
            ERROR(Text014, Item."No.", TempContractLine."Service Item No.");
        UNTIL TempContractLine.NEXT = 0;
      END;

      //********** [2] Check Disposal or FA Depreciation Books is TRUE
      FaSetup.GET;
      FaSetup.TESTFIELD("Default Depr. Book");
      FaSetup.TESTFIELD("WIP FA-Convert Acc.");
      FaSetup.TESTFIELD("WIP FA G/L Journal Batch");

      DeptBook.GET(FaSetup."Default Depr. Book");
      IF NOT DeptBook."G/L Integration - Disposal" THEN
        ERROR(Text015);

      //********** [3] Create Sales Return Order
      TempContractLine.SETFILTER(Returned , 'No');
      IF TempContractLine.FINDFIRST THEN
        CreateSalesFromContracts(TempContractLine, FALSE, TerminationDate);

      //********** [4] Run Sell FA Item Report
      ServiceItem.RESET;
      ServiceItem.CLEARMARKS;
      TempContractLine.SETFILTER("Service Item No." , '<>%1','');
      IF TempContractLine.FIND('-') THEN
        REPEAT
          ServiceItem.GET(TempContractLine."Service Item No.");
          ServiceItem.MARK(TRUE);
        UNTIL TempContractLine.NEXT = 0;
      ServiceItem.MARKEDONLY(TRUE);

      CLEAR(SellFAItemReport);
      SellFAItemReport.SetOptions(TerminationDate, CustomerNo, SalespersonCode, LocationCode, TempContractLine."Contract No.", '');
      SellFAItemReport.SETTABLEVIEW(ServiceItem);
      SellFAItemReport.USEREQUESTFORM := FALSE;
      SellFAItemReport.RUNMODAL;
    END;

    PROCEDURE CreateSalesFromContracts@1000000009(VAR TempContractLine@1000000020 : Record 5964;IsOrder@1000000001 : Boolean;NewOrderDate@1000000018 : Date);
    VAR
      SalesHeader@1000000002 : Record 36;
      SalesLine@1000000003 : Record 37;
      CurrExchRate@1000000007 : Record 330;
      SalesHeader2@1000000013 : Record 36;
      ServMgt@1000000015 : Record 5911;
      ReasonCode@1000000016 : Record 231;
      ReturnReason@1000000017 : Record 6635;
      DimMgt@1000000009 : Codeunit 408;
      SVMContractMgt@1000000008 : Codeunit 5940;
      LocationList@1000000022 : Form 15;
      SalesLineNo@1000000021 : Integer;
      StringOption@1000000019 : Text[250];
      OptionText@1000000004 : Code[10];
      Selection@1000000000 : Integer;
      LastEntryNo@1000000006 : Integer;
      Inbound@1000000005 : Boolean;
      Ins@1000000010 : Boolean;
      l_recSOT@1000000011 : Record 50042;
      SalesHeaderSub@1000000012 : Record 50127;
      SalesLine1@1000000014 : Record 37;
      l_dateDiff@1000000023 : Text[20];
      l_recRespCenter@1000000024 : Record 5714;
    BEGIN
      //CreateSalesFromContracts
      SpecialOrderType := '';    //#005

      ContractLine.RESET;

      IF TempContractLine.FIND('-') THEN
        REPEAT
          ContractLine.GET(TempContractLine."Contract Type",TempContractLine."Contract No.",TempContractLine."Line No.");
          ContractLine.MARK(TRUE);
        UNTIL TempContractLine.NEXT = 0;

      ContractLine.MARKEDONLY(TRUE);
      ContractLine.FIND('-');

      //********** [1] Retrieve Setup data and Order Type Selection
      ContractHeader.GET(ContractLine."Contract Type",ContractLine."Contract No.");
      SpecialContractSetup.GET(ContractHeader."Special Service Contract Type");

      IF SpecialContractSetup."Allow Multiple Order Type" THEN BEGIN
        StringOption := '';
        SpecialOrderSetup.SETRANGE("Source Type", SpecialOrderSetup."Source Type"::Sales);
        IF IsOrder THEN
          SpecialOrderSetup.SETRANGE("Document Type", SpecialOrderSetup."Document Type"::Order)
        ELSE
          SpecialOrderSetup.SETRANGE("Document Type", SpecialOrderSetup."Document Type"::"Return Order");
        IF SpecialOrderSetup.FIND('-') THEN
          REPEAT
            IF NOT SpecialOrderSetup."Exclude from Order Selection" THEN BEGIN
              IF SpecialOrderSetup."Special Order Type" = '' THEN
                OptionText := 'NORMAL';

              IF StringOption <> '' THEN
                StringOption := StringOption + ',' + SpecialOrderSetup."Special Order Type"
              ELSE
                StringOption := SpecialOrderSetup."Special Order Type";
            END;
          UNTIL SpecialOrderSetup.NEXT = 0;
          Selection := STRMENU(StringOption);
          IF Selection <> 0 THEN
            SpecialOrderType := SELECTSTR(Selection, StringOption);
      END;

      IF SpecialOrderType = '' THEN
        IF IsOrder THEN
          SpecialOrderType := SpecialContractSetup."Sales Order Special Type"
        ELSE
          SpecialOrderType := SpecialContractSetup."Return Order Special Type";

      //#013 <<
      IF SalesToRental AND IsOrder THEN
        SpecialOrderType := 'RENTAL';
      //#013 >>

      //#005 <<
      ServiceMgtSetup.GET;
      IF ChangeContract THEN BEGIN
        ServiceMgtSetup.TESTFIELD("Change Contract Loc. - Add");
        LocationCode := ServiceMgtSetup."Change Contract Loc. - Add";
        LocationRec.GET(LocationCode);
      END ELSE IF RemoveContract THEN BEGIN
        ServiceMgtSetup.TESTFIELD("Change Contract Loc. - Add");
        ServiceMgtSetup.TESTFIELD("Change Contract Loc. - Remove");
        LocationCode := ServiceMgtSetup."Change Contract Loc. - Add";
        RemoveLocation := ServiceMgtSetup."Change Contract Loc. - Remove";
        LocationRec.GET(LocationCode);
      //#006 <<
      END ELSE IF RentalToSales THEN BEGIN
        ServiceMgtSetup.TESTFIELD("Default Rental To Sales Loc.");
        LocationCode := ServiceMgtSetup."Default Rental To Sales Loc.";
        LocationRec.GET(LocationCode);
      //#006 >>
      //#013 <<
      END ELSE IF SalesToRental THEN BEGIN
        ServiceMgtSetup.TESTFIELD("Default T/D to Rent. Loc");
        LocationCode := ServiceMgtSetup."Default T/D to Rent. Loc";
        LocationRec.GET(LocationCode);
      //#013 >>
      END ELSE BEGIN
      //#005 >>
        //********** [2] Location Selection
        //#5 [START]
        IF IsOrder THEN
          SpecialOrderSetup.GET(SpecialOrderSetup."Source Type"::Sales, SalesHeader."Document Type"::Order, SpecialOrderType)
        ELSE
          SpecialOrderSetup.GET(SpecialOrderSetup."Source Type"::Sales, SalesHeader."Document Type"::"Return Order", SpecialOrderType);
        IF SpecialOrderSetup."Default Location Code" <> '' THEN
          LocationCode := SpecialOrderSetup."Default Location Code"
        ELSE BEGIN
        //#5 [END]
          CLEAR(LocationList);
          LocationList.CAPTION:='Select Location';
          LocationList.LOOKUPMODE:=TRUE;
          IF LocationList.RUNMODAL=ACTION::LookupOK THEN
            LocationList.GETRECORD(LocationRec)
          ELSE
            ERROR(Text013);
          LocationCode := LocationRec.Code;
        END; //#5
      END;         //#005

      SalespersonCode := ContractHeader."Salesperson Code";

      //********** [3] Create Sales Order Header
      SalesHeader.INIT;
      SalesHeader.SetHideValidationDialog(TRUE);
      IF IsOrder THEN
        SalesHeader."Document Type" := SalesHeader."Document Type"::Order
      ELSE BEGIN
        SalesHeader."Document Type" := SalesHeader."Document Type"::"Return Order";
        //#4 [START]
        {IF ContractHeader."Special Order Type" IN ['DEMO', 'TRIAL', 'LOANER'] THEN
          IF ReasonCode.GET('RETURN') THEN BEGIN
            ContractHeader."Cancel Reason Code" := ReasonCode.Code;
            ContractHeader.MODIFY;
          END;}//Alex Remarked
        //#4 [END]
      END;
      SalesHeader."Special Order Type" := SpecialOrderType;
      SalesHeader.INSERT(TRUE);

      //#007 <<
      {
      l_recSOT.RESET;
      l_recSOT.SETRANGE("Source Type",l_recSOT."Source Type"::Sales);
      l_recSOT.SETRANGE("Document Type",l_recSOT."Document Type"::Order);
      l_recSOT.SETRANGE("Special Order Type",ContractHeader."Special Order Type");
      l_recSOT.SETRANGE("Document Nature",l_recSOT."Document Nature"::Rental);
      IF l_recSOT.FIND('-') THEN BEGIN
         g_recSHSub.RESET;
         g_recSHSub.SETRANGE("Document Type",SalesHeader."Document Type");
         g_recSHSub.SETRANGE("No.",SalesHeader."No.");
         IF g_recSHSub.FIND('-') THEN BEGIN
            g_recSHSub."Type of Rental" := ContractHeader."Type of Rental";
            g_recSHSub.MODIFY;
         END;
      END;
      }
      //#007 >>

      //SpecialOrderSetup.GET(SpecialOrderSetup."Source Type"::Sales, SalesHeader."Document Type", SalesHeader."Special Order Type"); //#5

      SalesHeader."Order Date" := NewOrderDate;
      SalesHeader.VALIDATE("Posting Date", NewOrderDate);
      SalesHeader.VALIDATE("Document Date", NewOrderDate);
      IF DATE2DWY(NewOrderDate,1) < 5 THEN
        l_dateDiff := '1D'
      ELSE
        l_dateDiff := FORMAT(8-DATE2DWY(NewOrderDate,1)) +'D';

      SalesHeader.VALIDATE("Shipment Date", CALCDATE(l_dateDiff,NewOrderDate)); //CELKI #12


      SalesHeader."Posting Description" := FORMAT(SalesHeader."Document Type") + ' ' + SalesHeader."No.";
      SalesHeader.VALIDATE("Sell-to Customer No.",ContractLine."Customer No.");
      SalesHeader.VALIDATE("Bill-to Customer No.",ContractHeader."Bill-to Customer No.");
      SalesHeader."Location Code" := LocationRec.Code;
      SalesHeader."Related Sales Order No." := ContractHeader."Sales Order No.";

      Customer.GET(SalesHeader."Sell-to Customer No.");
      //#001 <<
      //Customer.TESTFIELD(Blocked,FALSE);
      Customer.TESTFIELD(Blocked,0);
      //#001 >>
      Customer.TESTFIELD("Gen. Bus. Posting Group");

      SalesHeader."Sell-to Customer Name" := Customer.Name;
      SalesHeader."Sell-to Customer Name 2" := Customer."Name 2";
      SalesHeader."Sell-to Address" := Customer.Address;
      SalesHeader."Sell-to Address 2" := Customer."Address 2";
      SalesHeader."Sell-to City" := Customer.City;
      SalesHeader."Sell-to Post Code" := Customer."Post Code";
      SalesHeader."Sell-to County" := Customer.County;
      SalesHeader."Sell-to Country/Region Code" := Customer."Country/Region Code";
      SalesHeader."Sell-to Contact" := Customer.Contact;
      SalesHeader.VALIDATE("Ship-to Code",ContractHeader."Ship-to Code");
      SalesHeader."Service Contract No." := ContractHeader."Contract No.";
      SalesHeader."Gen. Bus. Posting Group" := Customer."Gen. Bus. Posting Group";
      SalesHeader."VAT Bus. Posting Group" := Customer."VAT Bus. Posting Group";
      SalesHeader."Currency Code" := ContractHeader."Currency Code";
      SalesHeader."Currency Factor" := CurrExchRate.ExchangeRate(SalesHeader."Posting Date",SalesHeader."Currency Code");
      SalesHeader.VALIDATE("Payment Terms Code",ContractHeader."Payment Terms Code");
      SalesHeader."Your Reference" := ContractHeader."Your Reference";
      SalesHeader.VALIDATE("Salesperson Code", ContractHeader."Salesperson Code");
      SalesHeader."Shortcut Dimension 1 Code" := ContractHeader."Shortcut Dimension 1 Code";
      SalesHeader."Shortcut Dimension 2 Code" := ContractHeader."Shortcut Dimension 2 Code";
      //CELKI #10
      SalesHeader."Created by":=USERID;
      //CELKI #10
      SalesHeader."External Document No." := ContractHeader."Sales Order No.";     //#010
      SalesHeader.MODIFY;

      //Yan
      // Get the previous sales order & contract no. to calculate the new contract template(FOR CPAP TIP/TOP)
      IF IsOrder AND ((ContractHeader."Cancel Reason Code" ='CTS') OR (ContractHeader."Cancel Reason Code" ='TTR')) THEN
      BEGIN
        g_recOrderRelation.INIT;
        g_recOrderRelation."Previous Contract No." := ContractHeader."Contract No.";
        g_recOrderRelation."Previous Order No." := ContractHeader."Sales Order No.";
        g_recOrderRelation."Previous Cont Cancel Reason" := ContractHeader."Cancel Reason Code";
        g_recOrderRelation."Order No." := SalesHeader."No.";
        g_recOrderRelation."Campaign No." := ContractHeader."Campaign Code";
        IF CALCDATE('-1M',SalesHeader."Shipment Date") >= ContractHeader."Starting Date" THEN
           g_recOrderRelation.isLessThan1M := FALSE
        ELSE
           g_recOrderRelation.isLessThan1M := TRUE;

        g_recOrderRelation.INSERT(TRUE);
      END;


      DimMgt.DeleteDocDim(
        DATABASE::"Sales Header",
        SalesHeader."Document Type",
        SalesHeader."No.",0);
      SVMContractMgt.CopyContractDimToDocDim(
        ContractHeader,DATABASE::"Sales Header",
        SalesHeader."Document Type",
        SalesHeader."No.",0);

      //SalesHeader.VALIDATE("Salesperson Code", ContractHeader."Salesperson Code");//Alex

      //********** [4] Create Sales Order Lines
      SalesLineNo := 0;
      REPEAT
        //#005 <<
        IF ChangeContract THEN BEGIN
          IF NOT IsOrder THEN BEGIN
            IF ContractLine."Changed SRO No." <> '' THEN
              ERROR(Text018,'Sales Return Order',ContractLine."Changed SRO No.");
            ContractLine."Changed SRO No." := SalesHeader."No.";
          END;
          IF IsOrder THEN BEGIN
            IF ContractLine."Changed SO No." <> '' THEN
              ERROR(Text018,'Sales Order',ContractLine."Changed SO No.");
            ContractLine."Changed SO No." := SalesHeader."No.";
          END;
        END ELSE IF RemoveContract THEN BEGIN
          IF NOT IsOrder THEN BEGIN
            IF ContractLine."Removed SRO No." <> '' THEN
              ERROR(Text018,'Sales Return Order',ContractLine."Removed SRO No.");
            ContractLine."Removed SRO No." := SalesHeader."No.";
          END;
          IF IsOrder THEN BEGIN
            IF ContractLine."Removed SO No." <> '' THEN
              ERROR(Text018,'Sales Order',ContractLine."Removed SO No.");
            ContractLine."Removed SO No." := SalesHeader."No.";
          END;
        //#013 <<
        END ELSE IF SalesToRental THEN BEGIN
          IF (ContractLine."Sales Order No." <> '') AND (IsOrder = FALSE) THEN
            IF SalesHeader2.GET(ContractLine."Sales Order Type",ContractLine."Sales Order No.") THEN
              ERROR(Text012,ContractLine."Service Item No.", FORMAT(SalesHeader2."Document Type"), SalesHeader2."No.");

          ContractLine."Sales Order Type" := SalesHeader."Document Type";
          ContractLine."Sales Order No." := SalesHeader."No.";
          ContractLine."Special Order Type" := SalesHeader."Special Order Type";
        //#013 >>
        END ELSE BEGIN
        //#005 >>
          IF ContractLine."Sales Order No." <> '' THEN
            IF SalesHeader2.GET(ContractLine."Sales Order Type",ContractLine."Sales Order No.") THEN
              ERROR(Text012,ContractLine."Service Item No.", FORMAT(SalesHeader2."Document Type"), SalesHeader2."No.");

          ContractLine."Sales Order Type" := SalesHeader."Document Type";
          ContractLine."Sales Order No." := SalesHeader."No.";
          ContractLine."Special Order Type" := SalesHeader."Special Order Type";
        END;
        ContractLine.MODIFY;

        //#005 <<
        Ins := TRUE;
        IF RemoveContract AND ContractLine."Select to Remove" AND IsOrder THEN
          Ins := FALSE;

        IF Ins THEN BEGIN
        //#005 >>

          SalesLine.INIT;
          SalesLine.fn_SkipRentalChk; //#007
          SalesLine.fn_BypassUpdate;  //#010
          SalesLine."Document Type" := SalesHeader."Document Type";
          SalesLine."Document No." := SalesHeader."No.";
          SalesLineNo := SalesLineNo + 10000;
          SalesLine."Line No." := SalesLineNo;

          SalesLine.VALIDATE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
          SalesLine.VALIDATE(Type, SalesLine.Type::Item);
          SalesLine.VALIDATE("No.", ContractLine."Item No.");
          IF SalesHeader."Location Code" = '' THEN
            SalesLine.VALIDATE("Location Code", SpecialOrderSetup."Default Location Code")
          ELSE
            SalesLine.VALIDATE("Location Code", SalesHeader."Location Code");

          SalesLine.INSERT(TRUE);   //#004

          //#005 <<
          IF RemoveContract AND ContractLine."Select to Remove" AND NOT IsOrder THEN
            SalesLine.VALIDATE("Location Code",RemoveLocation);
          //#005 >>
          //Alex Update Sales Return Line's Location to WCS if it is gas item or MR Product.
          IF COMPANYNAME = 'Celki International Limited' THEN
          BEGIN
            IF (NOT IsOrder) AND (STRPOS(ContractLine."Item No.",'COA') = 1) THEN
              SalesLine.VALIDATE("Location Code",'WCS');
            IF (NOT IsOrder) AND (STRPOS(ContractLine."Item No.",'MR') = 1) THEN
            BEGIN
              l_recRespCenter.RESET;
              l_recRespCenter.SETRANGE(l_recRespCenter."Global Dimension 1 Code" ,SalesHeader."Shortcut Dimension 1 Code");
              IF (l_recRespCenter.FINDFIRST) AND (SalesHeader."Shortcut Dimension 1 Code" <> 'HK')THEN
                SalesLine.VALIDATE("Location Code",l_recRespCenter."Location Code")
              ELSE
                SalesLine.VALIDATE("Location Code",'WCS');
            END;
          END;
          //Alex

          IF NOT IsOrder THEN
            IF ContractHeader."Cancel Reason Code" <> '' THEN BEGIN
              IF NOT ReasonCode.GET(ContractHeader."Cancel Reason Code") THEN
                ERROR(Text016, ContractHeader."Cancel Reason Code", ContractHeader."Contract No.");

              IF NOT ReturnReason.GET(ContractHeader."Cancel Reason Code") THEN BEGIN
                ReturnReason.INIT;
                ReturnReason.Code := ReasonCode.Code;
                ReturnReason.Description := ReasonCode.Description;
                ReturnReason.INSERT;
              END;

              SalesLine."Return Reason Code" := ReturnReason.Code;
            END;

          SalesLine.VALIDATE(Quantity, 1);
          SalesLine.VALIDATE("Shipment Date", SalesHeader."Shipment Date");
          SalesLine."Shortcut Dimension 1 Code" := SalesHeader."Shortcut Dimension 1 Code";
          SalesLine."Shortcut Dimension 2 Code" := SalesHeader."Shortcut Dimension 2 Code";
          SalesLine."Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
          SalesLine."Service Contract No." := ContractLine."Contract No.";
          SalesLine."Service Item No." := ContractLine."Service Item No.";
          IF NOT IsOrder THEN
            SalesLine.VALIDATE("Unit Price", 0);
          //#004 <<
          //SalesLine.INSERT(TRUE);
          SalesLine.MODIFY(TRUE);
          //#004 >>

          //********** [5] Item Tracking Information
          IF ContractLine."Serial No." <> '' THEN BEGIN
            InsertSalesItemTracking(SalesLine, ContractLine."Item No.", ContractLine."Serial No.",
                                    ContractLine."Vendor Serial No.");
          END;
        END;    //#005
      UNTIL ContractLine.NEXT = 0;

      //#009 <<

      IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order" THEN
      BEGIN
        SalesHeaderSub.GET(SalesHeader."Document Type",SalesHeader."No.");
        SalesHeaderSub."Type of Rental" := ContractHeader."Type of Rental";
        SalesHeaderSub.MODIFY(TRUE);
      END;

      //#009 >>

      //#012 <<
      IF g_codBOMItem <> '' THEN BEGIN
        SalesLine.RESET;
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.DELETEALL;

        SalesLine1.INIT;
        SalesLine1."Document No." := SalesHeader."No.";
        SalesLine1."Document Type" := SalesHeader."Document Type";
        SalesLine1."Line No." := 10000;
        SalesLine1.VALIDATE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
        SalesLine1.VALIDATE(Type, SalesLine.Type::Item);
        SalesLine1.VALIDATE("No.", g_codBOMItem);
        IF SalesHeader."Location Code" = '' THEN
          SalesLine1.VALIDATE("Location Code", SpecialOrderSetup."Default Location Code")
        ELSE
          SalesLine1.VALIDATE("Location Code", SalesHeader."Location Code");
        SalesLine1.INSERT(TRUE);
        SalesLine1.VALIDATE(Quantity, 1);
        SalesLine1.VALIDATE("Shipment Date", SalesHeader."Shipment Date");
        SalesLine1."Shortcut Dimension 1 Code" := SalesHeader."Shortcut Dimension 1 Code";
        SalesLine1."Shortcut Dimension 2 Code" := SalesHeader."Shortcut Dimension 2 Code";
        SalesLine1."Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
        IF NOT IsOrder THEN
          SalesLine1.VALIDATE("Unit Price", 0);
        SalesLine1.MODIFY(TRUE);
        COMMIT;
        CODEUNIT.RUN(CODEUNIT::"Sales-Explode BOM",SalesLine1);

      //#012 >>
        //Alex - Remove Same Item No. with Bom Item

        g_recSalesLine.RESET;
        g_recSalesLine.SETRANGE("Document No." ,SalesHeader."No.");
        g_recSalesLine.SETRANGE(Type , g_recSalesLine.Type::Item);
        g_recSalesLine.SETFILTER("Line No." , '>%1' , SalesLineNo );
        IF g_recSalesLine.FINDFIRST THEN
        REPEAT
          SalesLine.RESET;
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE(Type , SalesLine.Type::Item);
          SalesLine.SETFILTER("No." , g_recSalesLine."No.");
          IF SalesLine.COUNT > 1 THEN
          BEGIN
            SalesLine.FINDFIRST;
            IF g_recSalesLine."Unit Price" <> 0 THEN
            BEGIN
              SalesLine.VALIDATE ("Unit Price",g_recSalesLine."Unit Price");
              SalesLine.MODIFY;
            END;
            g_recSalesLine.DELETE;
          END;
        UNTIL g_recSalesLine.NEXT = 0;

        g_recSalesLine.RESET;
        g_recSalesLine.SETRANGE("Document No." ,SalesHeader."No.");
        g_recSalesLine.SETFILTER("Line No." , FORMAT(SalesLineNo+10000 ));
        IF g_recSalesLine.FINDFIRST THEN
        BEGIN
          SalesLine.RESET;
          SalesLine.INIT;
          SalesLine.TRANSFERFIELDS(g_recSalesLine);
          SalesLine."Line No.":=999;
          SalesLine.INSERT;
          g_recSalesLine.DELETE;
        END;
      END;
        //Alex

      IF IsOrder THEN
        MESSAGE(Text008, FORMAT(SpecialOrderType,0), SalesHeader."No.")
      ELSE
        MESSAGE(Text017, FORMAT(SpecialOrderType,0), SalesHeader."No.");
    END;

    PROCEDURE CalcRentalPeriod@1000000002(PostingDate@1000000000 : Date;StartingDate@1000000001 : Integer) Duration : Text[30];
    VAR
      CurrMonth@1000000002 : Integer;
      EndingDate@1000000003 : Date;
      m@1000000005 : Integer;
      y@1000000004 : Integer;
    BEGIN
      CurrMonth:=DATE2DMY(PostingDate,2);
      IF CurrMonth IN [1,3,5,7,8,10,12] THEN BEGIN
        EndingDate:=CALCDATE('+1M-1D',PostingDate);
      END ELSE BEGIN
        EndingDate:=CALCDATE('+1M',PostingDate);
        y:=DATE2DMY(EndingDate,3);
        m:=DATE2DMY(EndingDate,2);
        EndingDate:=DMY2DATE(StartingDate,m,y);
        EndingDate:=CALCDATE('-1D',EndingDate);
      END;
      Duration := FORMAT(PostingDate,0) + ' - ' + FORMAT(EndingDate,0);
    END;

    PROCEDURE CarryOldServOrder1@1000000008(p_recSCHeader@1000000000 : Record 5965;VAR p_recSCHeaderN@1000000003 : Record 5965);
    VAR
      l_recSCHeader@1000000001 : Record 5965;
      l_recServHeader@1000000002 : Record 5900;
      l_recServDocReg@1000000004 : Record 5936;
      l_recServDocRegN@1000000005 : Record 5936;
      l_recServHeaderArch@1000000006 : Record 50075;
      l_codIncompleteCode@1000000007 : Code[20];
      l_codDocNo@1000000008 : Code[20];
      l_recReasonCode@1000000009 : Record 231;
      l_recServLine@1000000010 : Record 5902;
      l_recServItemLineN@1000000011 : Record 5901;
      l_recServItemLine@1000000012 : Record 5901;
    BEGIN
      //#002 <<
      {
      l_recReasonCode.SETRANGE("Service Contract Termination",TRUE);
      l_recReasonCode.FIND('-');
      l_codIncompleteCode := l_recReasonCode.Code;
      }

      ServMgtSetup.GET;
      ServMgtSetup.TESTFIELD("Force Close Serv Order Reason");
      l_codIncompleteCode := ServMgtSetup."Force Close Serv Order Reason";

      //carry outstanding service order which is closed by system
      l_recServHeaderArch.SETCURRENTKEY("Contract No.",Status,"Posting Date");
      l_recServHeaderArch.SETRANGE("Contract No.",p_recSCHeader."Contract No.");
      l_recServHeaderArch.SETRANGE("Incomplete Code",l_codIncompleteCode);
      IF l_recServHeaderArch.FINDSET THEN REPEAT
        //MESSAGE(FORMAT(l_recServHeaderArch));
        l_recServHeader.INIT;
        l_recServHeader."Document Type" := l_recServHeader."Document Type"::Order;
        l_recServHeader.INSERT(TRUE);
        l_codDocNo := l_recServHeader."No.";
        l_recServHeader.TRANSFERFIELDS(l_recServHeaderArch);
        l_recServHeader."No." := l_codDocNo;
        l_recServHeader."Contract No." := p_recSCHeaderN."Contract No.";
        l_recServHeader."Incomplete Code" := '';
        l_recServHeader.MODIFY;

        l_recServItemLine.RESET;
        l_recServItemLine.SETRANGE("Document No.",l_recServHeaderArch."No.");
        IF l_recServItemLine.FINDSET THEN REPEAT
          l_recServItemLineN.INIT;
          l_recServItemLineN.TRANSFERFIELDS(l_recServItemLine);
          l_recServItemLineN."Document No." := l_recServHeader."No.";
          l_recServItemLineN."Contract No." := l_recServHeader."Contract No.";
          l_recServItemLineN.INSERT(TRUE);
        UNTIL l_recServItemLine.NEXT = 0;

      UNTIL l_recServHeaderArch.NEXT = 0;

      //#002 >>
    END;

    PROCEDURE CarryOldServOrder@1000000010(p_codOldContractNo@1000000003 : Code[20];p_codNewContractNo@1000000000 : Code[20]);
    VAR
      l_recSCHeader@1000000001 : Record 5965;
      l_recServHeader@1000000002 : Record 5900;
      l_recServDocReg@1000000004 : Record 5936;
      l_recServDocRegN@1000000005 : Record 5936;
      l_recServHeaderArch@1000000006 : Record 50075;
      l_codIncompleteCode@1000000007 : Code[20];
      l_codDocNo@1000000008 : Code[20];
      l_recReasonCode@1000000009 : Record 231;
      l_recServLine@1000000010 : Record 5902;
      l_recServItemLineArch@1000000011 : Record 50076;
      l_recServItemLine@1000000012 : Record 5901;
      l_cduNoSeriesMgt@1000000013 : Codeunit 396;
    BEGIN
      //#002 <<
      {
      l_recReasonCode.SETRANGE("Service Contract Termination",TRUE);
      l_recReasonCode.FIND('-');
      l_codIncompleteCode := l_recReasonCode.Code;
      }
      ServMgtSetup.GET;
      ServMgtSetup.TESTFIELD("Force Close Serv Order Reason");
      l_codIncompleteCode := ServMgtSetup."Force Close Serv Order Reason";

      //carry outstanding service order which is closed by system
      l_recServHeaderArch.SETCURRENTKEY("Contract No.",Status,"Posting Date");
      l_recServHeaderArch.SETRANGE("Contract No.",p_codOldContractNo);
      l_recServHeaderArch.SETRANGE("Incomplete Code",l_codIncompleteCode);
      IF l_recServHeaderArch.FINDSET THEN REPEAT
        //insert service order header
        l_recServHeader.INIT;
        l_recServHeader.TRANSFERFIELDS(l_recServHeaderArch);
        l_recServHeader."Document Type" := l_recServHeader."Document Type"::Order;
        l_recServHeader."No." := l_cduNoSeriesMgt.GetNextNo(l_recServHeader."No. Series",WORKDATE,TRUE);
        l_recServHeader.INSERT(TRUE);
        l_recServHeader."Contract No." := p_codNewContractNo;
        l_recServHeader."Incomplete Code" := '';
        l_recServHeader."Order Date" := l_recServHeaderArch."Order Date";          //#011
        l_recServHeader.MODIFY;

        //insert service order line
        l_recServItemLineArch.RESET;
        l_recServItemLineArch.SETRANGE("Document No.",l_recServHeaderArch."No.");
        IF l_recServItemLineArch.FINDSET THEN REPEAT
          l_recServItemLine.INIT;
          l_recServItemLine.TRANSFERFIELDS(l_recServItemLineArch);
          l_recServItemLine."Document No." := l_recServHeader."No.";
          l_recServItemLine."Contract No." := l_recServHeader."Contract No.";
          l_recServItemLine.INSERT(TRUE);
        UNTIL l_recServItemLineArch.NEXT = 0;

      UNTIL l_recServHeaderArch.NEXT = 0;
      //#002 >>
    END;

    PROCEDURE "---TEC---"@1000000011();
    BEGIN
    END;

    PROCEDURE IsChCtr@1000000012();
    BEGIN
      //#005 <<
      ChangeContract := TRUE;
      //#005 >>
    END;

    PROCEDURE IsRemCtr@1000000013();
    BEGIN
      //#005 <<
      RemoveContract := TRUE;
      //#005 >>
    END;

    PROCEDURE IsRentToSales@1000000017();
    BEGIN
      //#006 <<
      RentalToSales := TRUE;
      //#006 >>
    END;

    PROCEDURE GetUnitCost@1000000014(p_recServItemLine@1000000000 : Record 5901) : Decimal;
    VAR
      l_recItemLedgEntry@1000000001 : Record 32;
    BEGIN
      //#008 <<
      l_recItemLedgEntry.SETCURRENTKEY("Item No.","Entry Type","Serial No.");
      l_recItemLedgEntry.SETRANGE("Item No.",p_recServItemLine."Item No.");
      l_recItemLedgEntry.SETRANGE("Entry Type",l_recItemLedgEntry."Entry Type"::Sale);
      l_recItemLedgEntry.SETRANGE("Serial No.",p_recServItemLine."Serial No.");
      IF l_recItemLedgEntry.FINDLAST THEN BEGIN
        l_recItemLedgEntry.CALCFIELDS("Cost Amount (Actual)");
        EXIT(l_recItemLedgEntry."Cost Amount (Actual)");
      END;
      //#008 >>
    END;

    PROCEDURE SetBOMItem@1000000015(p_codItem@1000000000 : Code[20]);
    BEGIN
      //#012 <<
      g_codBOMItem := p_codItem;
      //#012 >>
    END;

    PROCEDURE IsSalesToRent@1000000016();
    BEGIN
      //#013 <<
      SalesToRental := TRUE;
      //#013 >>
    END;

    PROCEDURE ProcessSalesToRental@1000000019(VAR TempContractLine@1000000000 : Record 5964;TerminationDate@1000000006 : Date);
    VAR
      Item@1000000001 : Record 27;
      FaSetup@1000000002 : Record 5603;
      DeptBook@1000000003 : Record 5611;
      ServiceItem@1000000005 : Record 5940;
      SellFAItemReport@1000000004 : Report 50012;
      CustomerNo@1000000008 : Code[20];
    BEGIN
      //#013 <<
      //********** [1] Create Sales Return Order
      CreateSalesFromContracts(TempContractLine, FALSE, TerminationDate);

      //COMMIT;
      IF CONFIRM(Text019,FALSE) THEN BEGIN
        g_recItem.RESET;
        g_recItem.SETRANGE("Bill of Materials",TRUE);
        IF FORM.RUNMODAL(FORM::"Item List",g_recItem) = ACTION::LookupOK THEN
          SetBOMItem(g_recItem."No.");
      END;

      //********** [2] Create Sales Order
      CreateSalesFromContracts(TempContractLine, TRUE, TerminationDate);
      //#013 >>
    END;

    PROCEDURE "---PM Service----"@1000000018();
    BEGIN
    END;

    PROCEDURE ProducePMSchedule@1000000020();
    BEGIN
      g_booPMSchedule := TRUE;
    END;

    PROCEDURE UpdateServiceZoneCode@1000000021();
    VAR
      l_recServiceContractLine2@1000000001 : Record 50320;
      l_recCustomer@1000000000 : Record 18;
      l_recServiceContractHeader@1000000002 : Record 5965;
    BEGIN
      l_recServiceContractLine2.RESET;
      l_recServiceContractLine2.SETFILTER(l_recServiceContractLine2."Customer No.",'JB*');
      //2015-12-17 Modified by Kenny - Update Service Zone Code different with contract instead of blank - Start
      //l_recServiceContractLine2.SETFILTER(l_recServiceContractLine2."Service Zone Code",'%1','');
      //2015-12-17 Modified by Kenny - Update Service Zone Code different with contract instead of blank - End
      IF l_recServiceContractLine2.FIND('-') THEN
      BEGIN
         REPEAT
              l_recServiceContractHeader.RESET;
              l_recServiceContractHeader.SETRANGE("Contract No.",l_recServiceContractLine2."Contract No.");
              IF l_recServiceContractHeader.FINDFIRST THEN
              BEGIN
                  //MESSAGE(l_recServiceContractLine2."Contract No.");
                  l_recServiceContractLine2."Service Zone Code" :=  l_recServiceContractHeader."Service Zone Code";
                  l_recServiceContractLine2.MODIFY;
              END

         UNTIL l_recServiceContractLine2.NEXT = 0;
      END
    END;

    PROCEDURE UpdateContDetailBK@1000000023();
    VAR
      l_recContractL@1000000004 : Record 5964;
      l_recShiptoCode@1000000003 : Record 222;
      l_recContractH@1000000002 : Record 5965;
      l_recServItem@1000000001 : Record 5940;
      l_codTemplate@1000000000 : Code[20];
      ADOconn@1000000008 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Connection";
      ADOfields@1000000007 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000564-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Fields";
      ADOrec@1000000006 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000535-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Recordset";
      SQLString@1000000005 : Text[1000];
      l_recServContTemp@1000000009 : Record 5968;
    BEGIN
      g_recDatabase.RESET;
      g_recDatabase.SETRANGE(g_recDatabase."My Database",TRUE);
      IF g_recDatabase.FINDFIRST THEN
       IF NOT( g_recDatabase."Database Name" = 'Celki_Dev2') THEN
         EXIT;

      IF COMPANYNAME <> 'Celki International Limited' THEN
       EXIT;

      CREATE(ADOconn);
      CREATE(ADOrec);
      ////------ This to connect SQL Server
      ADOconn.ConnectionString:=
      'Driver={SQL Server}; Server=172.17.156.25; UID=celki; PWD=63M57by1+-';
      ADOconn.Open;

      SQLString:='SELECT distinct [contract Template] FROM [CELKICARE].[CallCentre].[dbo].[Contract Detail_BK]';
         // SQLString+=' where [JB No.] = '''+l_codCustNo+''' and [Contract No.] = '''+l_codContractNo+''' and [Vendor Serial No_] = ''';
         // SQLString+=l_recContractL."Vendor Serial No."+'''';
      ADOrec.Open(SQLString, ADOconn, 3);
      WHILE (NOT ADOrec.EOF) DO
      BEGIN
        l_recServContTemp.RESET;
        l_recServContTemp.SETFILTER("No.", FORMAT(ADOrec.Fields.Item('Contract Template').Value));
        IF l_recServContTemp.FINDFIRST THEN
        BEGIN
          SQLString:= 'UPDATE [CELKICARE].[CallCentre].[dbo].[Contract Detail_BK] ';
          SQLString+= 'SET [Contract Period] = '''+FORMAT(l_recServContTemp."Contract Period")+'''';
          SQLString+=
        ' WHERE [Contract Period] = '''' AND [Contract template] = '''+FORMAT(ADOrec.Fields.Item('Contract Template').Value)+'''';
          //message(SQLString);
           ADOconn.Execute(SQLString);
        END;

        ADOrec.MoveNext;
      END;
      ADOconn.Close;
      CLEAR(ADOconn);
    END;

    PROCEDURE MigrateCarePlan@1000000025();
    VAR
      l_recNewCarePlan@1000000000 : Record 50306;
      l_recCarePlan@1000000001 : Record 50182;
      l_recFirstCallTeleFollowUp@1000000002 : Record 50304;
      l_recCarePlanDetail@1000000003 : Record 50184;
      l_recCallLog@1000000004 : Record 50305;
      l_recCustomer@1000000005 : Record 18;
      l_recServContHeader@1000000006 : Record 5965;
      l_recSalesInvHeader@1000000007 : Record 112;
    BEGIN
      //Migrate to FIrst call telephone follow up-50304
      l_recCarePlan.RESET();
      l_recCarePlan.SETFILTER("Installation Date",'<>%1',0D);
      IF l_recCarePlan.FINDFIRST THEN
      REPEAT
        l_recCarePlan.CALCFIELDS("Call 1","Call 2","Call 3","Call 4","Call 5","Call 1 Complete Date",
                                "Call 2 Complete Date","Call 3 Complete Date","Call 4 Complete Date","Call 5 Complete Date");
        l_recCustomer.GET(l_recCarePlan."Customer No.");
        l_recFirstCallTeleFollowUp.INIT;
        l_recFirstCallTeleFollowUp.id := 0;
        EVALUATE(l_recFirstCallTeleFollowUp."Customer No." ,  FORMAT(l_recCarePlan."Customer No."));
        EVALUATE(l_recFirstCallTeleFollowUp."Installation Date" , FORMAT(l_recCarePlan."Installation Date"));
        EVALUATE(l_recFirstCallTeleFollowUp."Order No." , l_recCarePlan."Order No.");
        l_recFirstCallTeleFollowUp."Call 1" := l_recCarePlan."Call 1";
        l_recFirstCallTeleFollowUp."Item No." := l_recCarePlan."Item No.";
        l_recFirstCallTeleFollowUp."Item Desc" := l_recCarePlan."Item Desc";
        l_recFirstCallTeleFollowUp."Special Order Type" := l_recCarePlan."Special Order Type";
        l_recFirstCallTeleFollowUp.VALIDATE("Customer No.");
        l_recFirstCallTeleFollowUp.VALIDATE("Item No.");
        l_recFirstCallTeleFollowUp.VALIDATE("Program");
        IF l_recCarePlan."Call 1" <> 0D THEN
        BEGIN
          l_recFirstCallTeleFollowUp.INSERT(TRUE);
        END;

      //migrate to call telephone log-50305
        l_recCarePlanDetail.RESET();
        l_recCarePlanDetail.SETFILTER("Customer No.",l_recCarePlan."Customer No.");
        l_recCarePlanDetail.SETFILTER("Order No.",l_recCarePlan."Order No.");
        l_recCarePlanDetail.SETFILTER("Care Plan Times",'<>%1',0);
        l_recCarePlanDetail.SETFILTER("Care Plan Complete Date",'<>%1',0D);
        IF l_recCarePlanDetail.FINDFIRST THEN
        REPEAT
          l_recCallLog.INIT;
          l_recCallLog."Line No." := 0;
          l_recCallLog."Customer No." := l_recCarePlanDetail."Customer No.";
          l_recCallLog."Order No."  := l_recCarePlanDetail."Order No." ;
          l_recCallLog."Call Date" := TODAY;
          l_recCallLog."Installation Date" :=  l_recCarePlan."Installation Date";
          IF l_recCarePlanDetail."Care Plan Times" = 1 THEN
          BEGIN
            l_recCallLog.Type := l_recCallLog.Type ::" ";
          END;
          IF l_recCarePlanDetail."Care Plan Times" = 2 THEN
          BEGIN
            l_recCallLog.Type := l_recCallLog.Type ::"Call 1";
          END;
          IF l_recCarePlanDetail."Care Plan Times" = 3 THEN
          BEGIN
            l_recCallLog.Type := l_recCallLog.Type ::"Call 2";
          END;
          IF l_recCarePlanDetail."Care Plan Times" = 4 THEN
          BEGIN
            l_recCallLog.Type := l_recCallLog.Type ::"Call 3";
          END;
          IF l_recCarePlanDetail."Care Plan Times" = 5 THEN
          BEGIN
            l_recCallLog.Type := l_recCallLog.Type ::"Call 3";
          END;
          l_recCallLog."Call Complete Date" := l_recCarePlanDetail."Care Plan Complete Date";
          l_recCallLog."Call Complete Time" := l_recCarePlanDetail."Care Plan Complete Time";
          l_recCallLog."Call Complete By" := l_recCarePlanDetail."Care Plan Complete By";
          l_recCallLog.INSERT(TRUE);
        UNTIL l_recCarePlanDetail.NEXT = 0;

      //migrate to New care plan follow up-50306
        l_recCarePlanDetail.RESET();
        l_recCarePlanDetail.SETFILTER("Customer No.",l_recCarePlan."Customer No.");
        l_recCarePlanDetail.SETFILTER("Order No.",l_recCarePlan."Order No.");
        l_recCarePlanDetail.SETFILTER("Care Plan Times",'<>%1',0);
        IF l_recCarePlanDetail.FINDFIRST THEN
        REPEAT
            l_recNewCarePlan.INIT;
            l_recNewCarePlan.VALIDATE(id,0);
            l_recNewCarePlan.VALIDATE("Customer No.",l_recCarePlan."Customer No.");
            l_recNewCarePlan.VALIDATE("Order No.",l_recCarePlan."Order No.");
            l_recNewCarePlan.VALIDATE("Customer Type" ,l_recCarePlan."Customer Type" );
            l_recNewCarePlan.VALIDATE("Referral Name",l_recCarePlan."Referral Name");
            l_recNewCarePlan.VALIDATE("Department Code",l_recCarePlan."Department Code");
            l_recNewCarePlan.VALIDATE("Salesperson Code",l_recCarePlan."Salesperson Code");
            l_recNewCarePlan.VALIDATE("Referral No.",l_recCarePlan."Referral No.");
            l_recNewCarePlan.VALIDATE("Special Order Type",l_recCarePlan."Special Order Type");
            l_recNewCarePlan.VALIDATE("Installation Date",l_recCarePlan."Installation Date");
            l_recServContHeader.RESET();
            l_recServContHeader.SETFILTER("Sales Order No.",l_recCarePlan."Order No.");
            IF l_recServContHeader.FINDFIRST THEN
            BEGIN
              l_recNewCarePlan.VALIDATE("Service Template Code",l_recServContHeader."Template No.");
            END;
            IF l_recCarePlanDetail."Care Plan Times" = 1 THEN
            BEGIN
              l_recNewCarePlan.VALIDATE("Expected Call Date",l_recCarePlan."Call 1");
              l_recNewCarePlan.VALIDATE(Type,l_recNewCarePlan.Type::" ");
            END;
            IF l_recCarePlanDetail."Care Plan Times" = 2 THEN
            BEGIN
              l_recNewCarePlan.VALIDATE("Expected Call Date",l_recCarePlan."Call 2");
              l_recNewCarePlan.VALIDATE(Type,l_recNewCarePlan.Type::"Call 1");
            END;
            IF l_recCarePlanDetail."Care Plan Times" = 3 THEN
            BEGIN
              l_recNewCarePlan.VALIDATE("Expected Call Date",l_recCarePlan."Call 3");
              l_recNewCarePlan.VALIDATE(Type,l_recNewCarePlan.Type::"Call 2");
            END;
            IF l_recCarePlanDetail."Care Plan Times" = 4 THEN
            BEGIN
              l_recNewCarePlan.VALIDATE("Expected Call Date",l_recCarePlan."Call 4");
              l_recNewCarePlan.VALIDATE(Type,l_recNewCarePlan.Type::"Call 3");
            END;
            IF l_recCarePlanDetail."Care Plan Times" = 5 THEN
            BEGIN
              l_recNewCarePlan.VALIDATE("Expected Call Date",l_recCarePlan."Call 5");
              l_recNewCarePlan.VALIDATE(Type,l_recNewCarePlan.Type::"Call 3");
            END;
            l_recNewCarePlan.Remarks := l_recCarePlan.Remarks;
            l_recNewCarePlan."End Reason" := l_recCarePlan."End Reason";

            l_recSalesInvHeader.RESET();
            l_recSalesInvHeader.SETFILTER("Order No.",l_recCarePlan."Order No.");
            IF l_recSalesInvHeader.FINDFIRST THEN
            BEGIN
              l_recNewCarePlan.VALIDATE("Sales Invoice No.",l_recSalesInvHeader."No.");
            END;
            //l_recNewCarePlan.VALIDATE("Program",g_recServProSetup."Program");
            l_recNewCarePlan.INSERT(TRUE);
        UNTIL l_recCarePlanDetail.NEXT = 0;
      UNTIL l_recCarePlan.NEXT = 0;
    END;

    PROCEDURE GeneratePMForRentalCont@1000000024();
    VAR
      ADOconn@1000000004 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Connection";
      ADOfields@1000000003 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000564-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Fields";
      ADOrec@1000000002 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000535-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Recordset";
      ADOCommand@1000000001 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000507-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Command";
      SQLString@1000000000 : Text[1000];
      VarActiveConnection@1000000005 : Variant;
      l_recServContFollowUpD@1000000009 : Record 50328;
      l_intloop@1000000008 : Integer;
      l_txtTemplateNo@1000000007 : Text[100];
      l_boolResult@1000000006 : Boolean;
      l_recServCont@1000000018 : Record 5964;
      l_recServFollowD@1000000016 : Record 50328;
      g_recServiceContHeader@1000000015 : Record 5965;
      l_recFirstCallFollowUp@1000000014 : Record 50304;
      l_intPeriodCounter@1000000019 : Integer;
      l_intRentYear@1000000020 : Integer;
      l_codeYear@1000000021 : Code[10];
      l_codePeriod@1000000022 : Code[10];
      i@1000000023 : Integer;
      l_dateExpectPMDate@1000000024 : Date;
      l_dateContStartDate@1000000025 : Date;
      l_recServProSetup@1000000026 : Record 50198;
      l_intLineNo@1000000027 : Integer;
      l_codeContractNo@1000000028 : Code[30];
      l_codeServItemNo@1000000029 : Code[30];
      l_codeVendorSerialNo@1000000030 : Code[30];
      l_recRentalContTempMapping@1000000010 : Record 50192;
      l_recNewCarePlanFollowUp@1000000011 : Record 50306;
      l_recSalesInvHeader@1000000012 : Record 112;
      l_recCustomer@1000000013 : Record 18;
      l_codeItemNo@1000000017 : Code[20];
      l_recServProSetup2@1000000031 : Record 50198;
      l_recSpecContTemp@1000000032 : Record 50043;
      l_recServContLine2@1000000033 : Record 50320;
      l_codeNextRentContTemp@1000000034 : Code[100];
      l_dateContStartDateTemp@1000000035 : Date;
    BEGIN
      IF ISCLEAR(ADOconn) THEN
        CREATE(ADOconn)
      ELSE
      BEGIN
        CLEAR(ADOconn);
        CREATE(ADOconn);
      END;

      ADOconn.ConnectionString:='Driver={SQL Server}; Server=172.17.156.16\dynamicsnav;DataBase=Celki_PM; UID=super; PWD=citysuper';
      ADOconn.Open;

      CREATE(ADOCommand);
      VarActiveConnection := ADOconn;
      ADOCommand.ActiveConnection := VarActiveConnection;
      ////Stored procedure to get list of rental contract for PM generation///
      ADOCommand.CommandText := 'Celki_PM.[dbo].[CheckContractLine2Year]';
      //ADOCommand.CommandText := 'Celki_PM.[dbo].[CheckContractLine2ContractPeriod]';
      ADOCommand.CommandType := 4;
      ADOCommand.CommandTimeout := 0;
      ADOCommand.Execute;

      CREATE(ADOrec);
      ADOrec.ActiveConnection := VarActiveConnection;
      ADOrec.Open(ADOCommand);

      WHILE (NOT ADOrec.EOF) DO
      BEGIN
        CLEAR(l_intRentYear);
        CLEAR(l_intPeriodCounter);
        CLEAR(l_codeYear);
        CLEAR(l_dateContStartDate);
        CLEAR(l_intLineNo);
        CLEAR(l_codeVendorSerialNo);
        CLEAR(l_codeServItemNo);
        CLEAR(l_codeItemNo);
        CLEAR(l_codeContractNo);
        CLEAR(l_codeNextRentContTemp);
        EVALUATE(l_codeContractNo,FORMAT(ADOrec.Fields.Item('cont').Value));
        EVALUATE(l_intRentYear, FORMAT(ADOrec.Fields.Item('yr').Value));
        //l_intRentYear := l_intRentYear - 1;
        l_intRentYear := l_intRentYear;
        l_codeYear := FORMAT(l_intRentYear) +'Y';
        EVALUATE(l_codeServItemNo ,FORMAT(ADOrec.Fields.Item('serviceitemno').Value));
        EVALUATE(l_codeVendorSerialNo ,FORMAT(ADOrec.Fields.Item('VendorSerialNo').Value));
        EVALUATE(l_intLineNo,FORMAT(ADOrec.Fields.Item('ContlineNo').Value));
        EVALUATE(l_codeItemNo,FORMAT(ADOrec.Fields.Item('ItemNo').Value));

        g_recServiceContHeader.RESET;
        g_recServiceContHeader.SETFILTER("Contract No.",l_codeContractNo);
        IF  g_recServiceContHeader.FINDFIRST THEN
        BEGIN
          //get next Contract Template for rental contract
          l_codeNextRentContTemp := GetNextRentContTemp(g_recServiceContHeader."Customer No.",l_codeServItemNo,l_codeContractNo);

          l_dateContStartDate := CALCDATE(l_codeYear,CALCDATE('-1D',g_recServiceContHeader."Starting Date")); //generate PM start date
          //l_dateContStartDate := CALCDATE(l_codeYear, g_recServiceContHeader."Starting Date"); //generate PM start date
          //l_dateContStartDate := CALCDATE('-1D', CALCDATE(l_codeYear, g_recServiceContHeader."Starting Date")); //generate PM start date

          //MESSAGE(FORMAT(l_dateContStartDate));
          //MESSAGE(FORMAT(l_dateContStartDate) + ' ss');


          l_recServContLine2.RESET;
          l_recServContLine2.SETFILTER("Contract No.",l_codeContractNo);
          l_recServContLine2.SETFILTER("Service Item No.",l_codeServItemNo);
          IF l_recServContLine2.FINDFIRST THEN
          BEGIN
            l_recServContLine2.CALCFIELDS("Civil Servant","Service Item Group Code","Template No.","Business Type");
           // IF l_recSpecContTemp.GET(l_recServContLine2."Service Item Group Code",g_recServiceContHeader."Special Order Type",
           //                         l_recServContLine2."Business Type",l_recServContLine2."Civil Servant") THEN
            IF l_codeNextRentContTemp <> '' THEN
            BEGIN //Get the Next contract template for rental contract
        //////Generate Home Visit///////
              l_recServProSetup.RESET;
              l_recServProSetup.SETFILTER("No.",l_codeNextRentContTemp);
              l_recServProSetup.SETFILTER(Type,'Home Visit 1|Home Visit 2|Home Visit 3|Home Visit 4|Home Visit 5');
              l_recServProSetup.SETFILTER("Start date",'<=%1',TODAY);
              l_recServProSetup.SETFILTER("End Date",'>%1',TODAY);
              l_recServProSetup.SETFILTER("Closing Date",'');
              IF (l_recServProSetup.FIND('-')) AND (l_codeNextRentContTemp <>'') THEN
              REPEAT
                l_recServFollowD.INIT;
                l_recServFollowD."Contract No." := g_recServiceContHeader."Contract No.";
                l_recServFollowD."Contract Line No." := l_intLineNo;
                l_recServFollowD."Service Item No." := l_codeServItemNo;
                l_recServFollowD."Vendor Serial No." :=  l_codeVendorSerialNo;
                l_recServCont.RESET;
                l_recServCont.SETFILTER("Contract No.",g_recServiceContHeader."Contract No.");
                l_recServCont.SETFILTER("Service Item No.",l_codeServItemNo);
                IF l_recServCont.FINDFIRST THEN
                BEGIN
                  l_recServFollowD."Service Item Group" := l_recServCont."Service Item Group Code";
                END;

                //MESSAGE(FORMAT(l_dateContStartDateTemp));
                //l_dateContStartDateTemp := CALCDATE(l_recServProSetup.Period,l_dateContStartDate);
                //MESSAGE(FORMAT(l_dateContStartDateTemp));

                //MESSAGE(l_codeNextRentContTemp);
                //MESSAGE(FORMAT(l_recServProSetup.Period));

      IF CALCDATE(l_recServProSetup.Period,l_dateContStartDate) > DMY2DATE(1,1,2014)  THEN
      BEGIN
                l_recServFollowD."Excepted PM Date" :=CALCDATE(l_recServProSetup.Period,l_dateContStartDate);

                l_recServFollowD."Service Type" := l_recServProSetup.Type;
                l_recServFollowD."Service Name" := l_recServProSetup.Name;
                l_recServFollowD."Program" := l_recServProSetup."Program";
                IF (l_recServProSetup.Type = l_recServProSetup.Type ::"Home Visit 1") AND
                    (l_recServCont."Service Item Group Code" = 'CPAP') THEN
                BEGIN
                   l_recServFollowD.VALIDATE("Prefered Next Call Date" ,DMY2DATE(31,12,2099));
                   l_recServContLine2.VALIDATE("Prefered Next Call Date" ,DMY2DATE(31,12,2099));
                   l_recServContLine2.MODIFY;
                END;

                IF (NOT l_recServFollowD.GET(g_recServiceContHeader."Contract No.",l_intLineNo,
                    CALCDATE(l_recServProSetup.Period,l_dateContStartDate),0)) AND
                    (CALCDATE(l_recServProSetup.Period,l_dateContStartDate) > DMY2DATE(31,12,2012)) THEN
                BEGIN
                  l_recServFollowD.INSERT(TRUE);
                END

      END;




              UNTIL l_recServProSetup.NEXT = 0;
        /////Generate call/////
              l_recCustomer.GET(g_recServiceContHeader."Customer No.");
              l_recSalesInvHeader.RESET();
              l_recSalesInvHeader.SETFILTER("Order No.",g_recServiceContHeader."Sales Order No.");
              l_recSalesInvHeader.SETFILTER("Sell-to Customer No.",g_recServiceContHeader."Customer No.");
              IF l_recSalesInvHeader.FIND('-') THEN;
              l_recServProSetup2.RESET;
              l_recServProSetup2.SETFILTER("No.",l_codeNextRentContTemp);
              l_recServProSetup2.SETFILTER(Type,'Call 1|Call 2|Call 3|Call 4|Report');
              l_recServProSetup2.SETFILTER("Start date",'<=%1',TODAY);
              l_recServProSetup2.SETFILTER("End Date",'>%1',TODAY);
              l_recServProSetup2.SETFILTER("Closing Date",'');

              IF l_recServProSetup2.FIND('-') THEN
              REPEAT
              IF l_recServProSetup2.Type = l_recServProSetup2.Type::"Call 1" THEN   ///Create Call 1
              BEGIN
                l_recFirstCallFollowUp.RESET();
                l_recFirstCallFollowUp.SETFILTER("Contract No.",l_codeContractNo);
                l_recFirstCallFollowUp.SETFILTER("Call 1",FORMAT(CALCDATE(l_recServProSetup2.Period,l_dateContStartDate)));
                l_recFirstCallFollowUp.SETFILTER("Customer No.",g_recServiceContHeader."Customer No.");
                IF NOT l_recFirstCallFollowUp.FINDFIRST THEN  ///prenvent from duplicate insert
                BEGIN
                  l_recFirstCallFollowUp.INIT;
                  l_recFirstCallFollowUp.id := 0;
                  EVALUATE(l_recFirstCallFollowUp."Customer No." ,  FORMAT(g_recServiceContHeader."Customer No."));
                  EVALUATE(l_recFirstCallFollowUp."Installation Date" , FORMAT(g_recServiceContHeader."Starting Date"));
                  EVALUATE(l_recFirstCallFollowUp."Call 1" , FORMAT(CALCDATE(l_recServProSetup2.Period,l_dateContStartDate)));
                  EVALUATE(l_recFirstCallFollowUp."Order No." , g_recServiceContHeader."Sales Order No.");
                  EVALUATE(l_recFirstCallFollowUp."Program" , l_recServProSetup2."Program");
                  EVALUATE(l_recFirstCallFollowUp."Item No." , l_codeItemNo);
                  EVALUATE(l_recFirstCallFollowUp."Special Order Type" , FORMAT(g_recServiceContHeader."Special Order Type"));
                  EVALUATE(l_recFirstCallFollowUp."Salesperson Code",g_recServiceContHeader."Salesperson Code");
                  EVALUATE(l_recFirstCallFollowUp."Referral Contact",g_recServiceContHeader."Referral Contact");
                  l_recFirstCallFollowUp.VALIDATE("Customer No.");
                  //g_recFirstCallFollowUp.VALIDATE("Order No.");
                  l_recFirstCallFollowUp.VALIDATE("Program");
                  l_recFirstCallFollowUp.VALIDATE("Item No.");
                  l_recFirstCallFollowUp.INSERT(TRUE);
                 END
              END;
        ////Create Call 1-4////////
              l_recNewCarePlanFollowUp.RESET();
              l_recNewCarePlanFollowUp.SETFILTER("Customer No.",g_recServiceContHeader."Customer No.");
              l_recNewCarePlanFollowUp.SETFILTER("Contract No.",l_codeContractNo);
              l_recNewCarePlanFollowUp.SETFILTER(Type,FORMAT(l_recServProSetup2.Type));
              l_recNewCarePlanFollowUp.SETFILTER("Expected Call Date",FORMAT(CALCDATE(l_recServProSetup2.Period,l_dateContStartDate)));
              l_recNewCarePlanFollowUp.SETFILTER("Order No.",g_recServiceContHeader."Sales Order No.");
              IF NOT l_recNewCarePlanFollowUp.FINDFIRST THEN  ///prenvent from duplicate insert
              BEGIN
                l_recNewCarePlanFollowUp.INIT;
                l_recNewCarePlanFollowUp.VALIDATE(id,0);
                l_recNewCarePlanFollowUp.VALIDATE("Customer No.",g_recServiceContHeader."Customer No.");
                l_recNewCarePlanFollowUp.VALIDATE("Order No.",g_recServiceContHeader."Sales Order No.");
                l_recNewCarePlanFollowUp.VALIDATE("Customer Type" ,l_recCustomer."Customer Type 1" );
                l_recNewCarePlanFollowUp.VALIDATE("Referral No.",l_recSalesInvHeader."Referral Contact");
                l_recNewCarePlanFollowUp.VALIDATE("Referral Name",l_recSalesInvHeader."Referral Contact Name");
                l_recNewCarePlanFollowUp.VALIDATE("Department Code",l_recSalesInvHeader."Shortcut Dimension 2 Code");
                l_recNewCarePlanFollowUp.VALIDATE("Salesperson Code",l_recSalesInvHeader."Salesperson Code");
                l_recNewCarePlanFollowUp.VALIDATE("Special Order Type",l_recSalesInvHeader."Special Order Type");
                l_recNewCarePlanFollowUp.VALIDATE("Installation Date",l_recSalesInvHeader."Shipment Date");
                l_recNewCarePlanFollowUp.VALIDATE("Service Template Code",l_recServProSetup2."No.");
                l_recNewCarePlanFollowUp.VALIDATE(Type,l_recServProSetup2.Type);
                l_recNewCarePlanFollowUp.VALIDATE("Expected Call Date",
                  CALCDATE(l_recServProSetup2.Period,l_dateContStartDate));
                l_recNewCarePlanFollowUp.VALIDATE("Sales Invoice No.",l_recSalesInvHeader."No.");
                l_recNewCarePlanFollowUp.VALIDATE("Program",l_recServProSetup2."Program");
                l_recNewCarePlanFollowUp.INSERT(TRUE);
              END
              UNTIL l_recServProSetup2.NEXT = 0;
            END
           END

        END;
        ADOrec.MoveNext;
      END;

      CLEAR(ADOrec);
      ADOconn.Close;
    END;

    PROCEDURE GetNextRentContTemp@1000000022(p_codeCustomerNo@1000000000 : Code[20];p_codeServItemNo@1000000001 : Code[30];p_codeContractNo@1000000002 : Code[30]) r_codeNextContTemp : Code[100];
    VAR
      l_recCustomer@1000000003 : Record 18;
      l_recItem@1000000004 : Record 27;
      l_recServItem@1000000005 : Record 5940;
      l_recSpecContTemp@1000000006 : Record 50043;
      l_recServContH@1000000007 : Record 5965;
    BEGIN
      l_recCustomer.GET(p_codeCustomerNo);
      l_recServItem.GET(p_codeServItemNo);

      //MESSAGE(p_codeServItemNo);
      //MESSAGE(l_recServItem."Service Item Group Code");

      l_recServContH.RESET;
      l_recServContH.SETFILTER("Contract No.",p_codeContractNo);
      IF l_recServContH.FIND('-') THEN
      BEGIN
        l_recItem.RESET;
        l_recItem.SETFILTER("No.",l_recServItem."Item No.");
        IF l_recItem.FIND('-') THEN
        BEGIN
          //MESSAGE(l_recServContH."Template No.");

          l_recSpecContTemp.RESET;
          l_recSpecContTemp.SETRANGE("Civil Servant",l_recCustomer."Government Servant");
          l_recSpecContTemp.SETFILTER("Business Type",l_recCustomer."Business Type");
          l_recSpecContTemp.SETFILTER("Service Item Group Code",l_recServItem."Service Item Group Code");
          l_recSpecContTemp.SETFILTER("Special Order Type",l_recServContH."Special Order Type");
          //l_recSpecContTemp.SETFILTER("Contract Template",l_recServContH."Template No.");
          IF  l_recSpecContTemp.FIND('-') THEN
          BEGIN
            EXIT(l_recSpecContTemp."Next Rental Contract Template");
          END
        END
      END
    END;

    PROCEDURE GetContTemp@1000000027(p_codeSalesOrderNo@1000000000 : Code[100];p_codeCustomerNo@1000000001 : Code[30];p_codeSpecOrderType@1000000008 : Code[30];p_codeContractNo@1000000009 : Code[30]) r_codeContTemp : Code[100];
    VAR
      l_recCustomer@1000000002 : Record 18;
      l_recSalesLine@1000000003 : Record 37;
      l_recServItem@1000000004 : Record 5940;
      l_boolSet@1000000005 : Boolean;
      l_recItem@1000000006 : Record 27;
      l_recSpecContTemp@1000000007 : Record 50043;
      l_recOrderRelationship@1000000010 : Record 50311;
      l_boolIsConvert@1000000011 : Boolean;
    BEGIN
      //Sequence : V>B>O>C

      CLEAR(l_boolIsConvert);

      IF l_recOrderRelationship.GET(p_codeSalesOrderNo) THEN
        l_boolIsConvert := TRUE
      ELSE
        l_boolIsConvert := FALSE;

      l_recCustomer.GET(p_codeCustomerNo);
      l_recServItem.RESET;
      l_recServItem.SETCURRENTKEY("Sales Order No.");
      IF p_codeContractNo <> '' THEN
      BEGIN
        l_recServItem.SETFILTER("Current Active Contract No.", p_codeContractNo); //for existing contract
      END
      ELSE BEGIN
        l_recServItem.SETFILTER("Sales Order No.", p_codeSalesOrderNo);  //for creating contract
      END;
      l_recServItem.SETFILTER("Service Item Group Code",'VENTILATOR');
      IF l_recServItem.FIND('-') THEN
      BEGIN
          l_recSpecContTemp.SETRANGE("Service Item Group Code", 'VENTILATOR');
          l_recSpecContTemp.SETRANGE("Special Order Type",p_codeSpecOrderType);
          l_recSpecContTemp.SETRANGE("Business Type", l_recCustomer."Business Type");
          IF l_recSpecContTemp.FIND('-') THEN
            r_codeContTemp := l_recSpecContTemp."Contract Template";
      END
      ELSE BEGIN
        l_recServItem.SETFILTER("Service Item Group Code",'BIPAPHOME');
        IF l_recServItem.FIND('-') THEN
        BEGIN
          l_recSpecContTemp.SETRANGE("Service Item Group Code", 'BIPAPHOME');
          l_recSpecContTemp.SETRANGE("Special Order Type",p_codeSpecOrderType);
          l_recSpecContTemp.SETRANGE("Business Type", l_recCustomer."Business Type");
          IF l_recSpecContTemp.FIND('-') THEN
            r_codeContTemp := l_recSpecContTemp."Contract Template";
        END
        ELSE BEGIN
          l_recServItem.SETFILTER("Service Item Group Code",'O2CONC');
          IF l_recServItem.FIND('-') THEN
          BEGIN
            l_recSpecContTemp.SETRANGE("Service Item Group Code", 'O2CONC');
            l_recSpecContTemp.SETRANGE("Special Order Type",p_codeSpecOrderType);
            l_recSpecContTemp.SETRANGE("Business Type", l_recCustomer."Business Type");
            IF l_recSpecContTemp.FIND('-') THEN
              r_codeContTemp := l_recSpecContTemp."Contract Template";
          END
          ELSE BEGIN
            l_recServItem.SETFILTER("Service Item Group Code",'CPAP');
            IF l_recServItem.FIND('-') THEN
            BEGIN
              IF p_codeSpecOrderType IN ['SALES','CHHCCRCB','CHHCCRCD','CHHCCRMK','CHHCCRTY'
                                          ,'CHHCCRYL','CHHCCRST','CHHCCRKT'] THEN
              BEGIN
                l_recSpecContTemp.SETRANGE("Civil Servant" ,l_recCustomer."Government Servant" );
              END;
              l_recSpecContTemp.SETRANGE("Service Item Group Code", 'CPAP');
              l_recSpecContTemp.SETRANGE("Special Order Type",p_codeSpecOrderType);
              l_recSpecContTemp.SETRANGE("Business Type", l_recCustomer."Business Type");
              IF (l_recSpecContTemp.FIND('-'))  THEN
              BEGIN
                IF (l_boolIsConvert = FALSE) OR (l_recOrderRelationship."Contract Template" = '') THEN
                // if not R>P, T>P,T/R ,use normal template
                  r_codeContTemp := l_recSpecContTemp."Contract Template"
                ELSE
                  r_codeContTemp := l_recOrderRelationship."Contract Template";
              END;
              IF l_recServItem."Item No." = 'EQ00732' THEN  //hardcode for this CPAP item
                r_codeContTemp := 'FREE 0M P03';
            END
            ELSE BEGIN
              l_recServItem.SETFILTER("Service Item Group Code",'');
              l_recSpecContTemp.SETFILTER("Civil Servant" ,'');
              l_recServItem.SETFILTER("Item No.",'EQ*');
              IF l_recServItem.FIND('-') THEN
              BEGIN
                l_recSpecContTemp.SETRANGE("Service Item Group Code", l_recServItem."Service Item Group Code");
                l_recSpecContTemp.SETRANGE("Special Order Type",p_codeSpecOrderType);
                l_recSpecContTemp.SETRANGE("Business Type", l_recCustomer."Business Type");
                IF l_recSpecContTemp.FIND('-') THEN
                  r_codeContTemp := l_recSpecContTemp."Contract Template";
              END
              ELSE BEGIN
                l_recServItem.SETFILTER("Item No.",'');
                IF l_recServItem.FIND('-') THEN
                BEGIN
                  l_recSpecContTemp.SETRANGE("Service Item Group Code", l_recServItem."Service Item Group Code");
                  l_recSpecContTemp.SETRANGE("Special Order Type",p_codeSpecOrderType);
                  l_recSpecContTemp.SETRANGE("Business Type", l_recCustomer."Business Type");
                  IF l_recSpecContTemp.FIND('-') THEN
                    r_codeContTemp := l_recSpecContTemp."Contract Template";
                END
              END
            END
          END
        END
      END;

      EXIT (r_codeContTemp);
    END;

    PROCEDURE GetServiceType@1000000026(p_codeContractNo@1000000000 : Code[20];p_codeServItemNo@1000000001 : Code[30];p_dateHVDate@1000000002 : Date) r_txtServType : ARRAY [3] OF Text[1000];
    VAR
      l_recServContH@1000000003 : Record 5965;
      l_recServContFollowUp@1000000004 : Record 50328;
      l_recServProSetUp@1000000005 : Record 50198;
      l_txtTemplate@1000000006 : Text[100];
    BEGIN
      CLEAR(r_txtServType);
      l_recServContH.RESET();
      l_recServContH.SETFILTER("Contract No.",p_codeContractNo);
      IF l_recServContH.FIND('-') THEN
      BEGIN
        //l_txtTemplate := GetContTemp(l_recServContH."Sales Order No.",l_recServContH."Customer No."
        //                            ,l_recServContH."Special Order Type",l_recServContH."Contract No.");
        l_recServProSetUp.RESET();
        l_recServProSetUp.SETFILTER("No.",'=%1',l_recServContH."Template No.");
        //l_recServProSetUp.SETFILTER("No.",'=%1',l_txtTemplate);
        l_recServProSetUp.SETFILTER("Closing Date",'=%1',0D);
        IF  l_recServProSetUp.FIND('-') AND (l_txtTemplate <> '') THEN
        REPEAT
          IF (CALCDATE('<-1D>',CALCDATE(l_recServProSetUp.Period,l_recServContH."Starting Date"))
           //   = CALCDATE('<-1M>',p_dateHVDate)) THEN
            = p_dateHVDate) THEN
          BEGIN
            r_txtServType[1] := FORMAT(l_recServProSetUp.Type);
            r_txtServType[2] := FORMAT(l_recServProSetUp.Name);
            r_txtServType[3] := FORMAT(l_recServProSetUp."Program");
          END
        UNTIL (l_recServProSetUp.NEXT = 0) OR (r_txtServType[1] <>'');
      END;

      l_recServContFollowUp.RESET();
      l_recServContFollowUp.SETFILTER("Contract No.",p_codeContractNo);
      l_recServContFollowUp.SETFILTER("Service Item No.",p_codeServItemNo);
      l_recServContFollowUp.SETRANGE("Excepted PM Date",p_dateHVDate);
      IF l_recServContFollowUp.FINDFIRST() THEN
      BEGIN
        EVALUATE(l_recServContFollowUp."Service Type",r_txtServType[1]);
        EVALUATE(l_recServContFollowUp."Service Name",r_txtServType[2]);
        EVALUATE(l_recServContFollowUp."Program",r_txtServType[3]);
        l_recServContFollowUp.MODIFY;
      END
    END;

    PROCEDURE InsertMissingCall1@1000000028();
    VAR
      ADOconn@1000000003 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Connection";
      ADOfields@1000000002 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000564-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Fields";
      ADOrec@1000000001 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000535-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Recordset";
      SQLString@1000000000 : Text[1024];
      SQLString3@1000000009 : Text[1024];
      SQLString2@1000000004 : Text[1024];
      l_recFristCall@1000000005 : Record 50304;
      l_recNewCall@1000000006 : Record 50306;
      l_recSalesInvL@1000000007 : Record 113;
      l_recItem@1000000008 : Record 27;
    BEGIN
      CREATE(ADOconn);
      ////------ This to connect SQL Server
      ADOconn.ConnectionString:=
      'Driver={SQL Server}; Server=172.17.156.16\dynamicsnav; UID=super; PWD=citysuper';

      ADOconn.Open;
      SQLString:='Exec [Celki_PM].[dbo].[InsertCall1]';

      ADOconn.Execute(SQLString);

      ADOconn.Close;
      CLEAR(ADOconn);

      l_recFristCall.RESET();
      l_recFristCall.SETFILTER("Item No.",'=%1','');
      l_recFristCall.SETFILTER("Item Desc",'=%1','');
      IF l_recFristCall.FIND('-') THEN
      REPEAT
        l_recFristCall.CALCFIELDS("Posted Invoice No.");
        l_recSalesInvL.RESET();
        l_recSalesInvL.SETFILTER("Document No.",l_recFristCall."Posted Invoice No.");
        l_recSalesInvL.SETFILTER("Gen. Prod. Posting Group",'EQUIP|RENTAL');
        l_recSalesInvL.SETFILTER("Product Group Code",'BIPAPHOME|CPAP|O2CONC|VENTILHOME');
        l_recSalesInvL.SETFILTER("No.",'EQ*');
        IF (l_recSalesInvL.FINDFIRST) AND (l_recFristCall."Posted Invoice No." <>'') THEN
        BEGIN
          l_recFristCall."Item No." := l_recSalesInvL."No.";
          l_recFristCall."Item Desc" := l_recSalesInvL.Description +l_recSalesInvL."Description 2";
          l_recItem.GET(l_recSalesInvL."No.");
          l_recFristCall."Service Item Group" := l_recItem."Service Item Group";
          l_recFristCall.MODIFY;
        END;

        IF l_recFristCall."Home Visit 1" = 0D THEN
        BEGIN
          l_recNewCall.RESET();
          l_recNewCall.SETFILTER("Order No.",l_recFristCall."Order No.");
          l_recNewCall.SETFILTER(Type,'Home Visit 1');
          IF l_recNewCall.FINDFIRST THEN
          BEGIN
            l_recFristCall."Home Visit 1" := l_recNewCall."Expected Call Date";
            l_recFristCall.MODIFY;
          END;
        END;
      UNTIL  l_recFristCall.NEXT = 0;
    END;

    PROCEDURE DeleteDuplicateRecord@1000000029();
    VAR
      ADOconn@1000000009 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Connection";
      ADOfields@1000000008 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000564-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Fields";
      ADOrec@1000000007 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000535-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Recordset";
      SQLString@1000000006 : Text[1024];
      SQLString3@1000000005 : Text[1024];
      SQLString2@1000000004 : Text[1024];
      l_recFristCall@1000000003 : Record 50304;
      l_recNewCall@1000000002 : Record 50306;
      l_recSalesInvL@1000000001 : Record 113;
      l_recItem@1000000000 : Record 27;
    BEGIN

      CREATE(ADOrec);
      CREATE(ADOconn);
      ////------ This to connect SQL Server
      ADOconn.ConnectionString:=
      'Driver={SQL Server}; Server=172.17.156.16\dynamicsnav; UID=super; PWD=citysuper';

      ADOconn.Open;
      SQLString:='Select * from (SELECT [Customer No_],[Order No_],convert(varchar, [Expected Call Date],103) AS [Expected Call Date]';
      SQLString+=',count(*) as counts ';
      SQLString+='FROM [Celki_Dev2].[dbo].[Celki International Limited$New Care Plan Follow Up] ';
      SQLString+='where Type = 10 group by [Customer No_],[Order No_],[Expected Call Date])b ';
      SQLString+='where b.counts > 1 ';
      ADOrec.Open(SQLString, ADOconn, 3);
      WHILE (NOT ADOrec.EOF) DO
      BEGIN
        l_recNewCall.RESET();
        l_recNewCall.SETFILTER("Customer No.",FORMAT(ADOrec.Fields.Item('Customer No_').Value));
        l_recNewCall.SETFILTER("Order No.",FORMAT(ADOrec.Fields.Item('Order No_').Value));
        l_recNewCall.SETFILTER("Expected Call Date",FORMAT(ADOrec.Fields.Item('Expected Call Date').Value));
        IF l_recNewCall.FINDFIRST THEN
        BEGIN
          //MESSAGE(l_recNewCall."Order No.")
          l_recNewCall.DELETE();
        END;
        ADOrec.MoveNext;
      END;

      ADOconn.Close;
      CLEAR(ADOconn);
    END;

    PROCEDURE GeneratePMForRentalContForMiss@1000000030();
    VAR
      ADOconn@1000000035 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Connection";
      ADOfields@1000000034 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000564-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Fields";
      ADOrec@1000000033 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000535-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Recordset";
      ADOCommand@1000000032 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000507-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Command";
      SQLString@1000000031 : Text[1000];
      VarActiveConnection@1000000030 : Variant;
      l_recServContFollowUpD@1000000029 : Record 50328;
      l_intloop@1000000028 : Integer;
      l_txtTemplateNo@1000000027 : Text[100];
      l_boolResult@1000000026 : Boolean;
      l_recServCont@1000000025 : Record 5964;
      l_recServFollowD@1000000024 : Record 50328;
      g_recServiceContHeader@1000000023 : Record 5965;
      l_recFirstCallFollowUp@1000000022 : Record 50304;
      l_intPeriodCounter@1000000021 : Integer;
      l_intRentYear@1000000020 : Integer;
      l_codeYear@1000000019 : Code[10];
      l_codePeriod@1000000018 : Code[10];
      i@1000000017 : Integer;
      l_dateExpectPMDate@1000000016 : Date;
      l_dateContStartDate@1000000015 : Date;
      l_recServProSetup@1000000014 : Record 50198;
      l_intLineNo@1000000013 : Integer;
      l_codeContractNo@1000000012 : Code[30];
      l_codeServItemNo@1000000011 : Code[30];
      l_codeVendorSerialNo@1000000010 : Code[30];
      l_recRentalContTempMapping@1000000009 : Record 50192;
      l_recNewCarePlanFollowUp@1000000008 : Record 50306;
      l_recSalesInvHeader@1000000007 : Record 112;
      l_recCustomer@1000000006 : Record 18;
      l_codeItemNo@1000000005 : Code[20];
      l_recServProSetup2@1000000004 : Record 50198;
      l_recSpecContTemp@1000000003 : Record 50043;
      l_recServContLine2@1000000002 : Record 50320;
      l_codeNextRentContTemp@1000000001 : Code[100];
      l_dateContStartDateTemp@1000000000 : Date;
      l_templateFromDB@1000000036 : Code[50];
      l_recServFollowD2@1000000037 : Record 50328;
      l_recServFollowD3@1000000038 : Record 50328;
      l_TypeofRental@1000000039 : Code[50];
      l_recServFollowD4@1000000040 : Record 50328;
      l_replicateCounter@1000000041 : Integer;
      l_recServFollowD5@1000000042 : Record 50328;
    BEGIN
      IF ISCLEAR(ADOconn) THEN
        CREATE(ADOconn)
      ELSE
      BEGIN
        CLEAR(ADOconn);
        CREATE(ADOconn);
      END;

      ADOconn.ConnectionString:='Driver={SQL Server}; Server=172.17.156.16\dynamicsnav;DataBase=Celki_PM; UID=super; PWD=citysuper';
      ADOconn.Open;

      CREATE(ADOCommand);
      VarActiveConnection := ADOconn;
      ADOCommand.ActiveConnection := VarActiveConnection;
      //ADOCommand.CommandText := 'Celki_PM.[dbo].[CheckContractLine2YearForMiss]';
      ADOCommand.CommandText := 'Celki_PM.[dbo].[CheckContractLine2Year]';
      ADOCommand.CommandType := 4;
      ADOCommand.CommandTimeout := 0;
      ADOCommand.Execute;

      CREATE(ADOrec);
      ADOrec.ActiveConnection := VarActiveConnection;
      ADOrec.Open(ADOCommand);

      WHILE (NOT ADOrec.EOF) DO
      BEGIN
        CLEAR(l_intRentYear);
        CLEAR(l_intPeriodCounter);
        CLEAR(l_codeYear);
        CLEAR(l_dateContStartDate);
        CLEAR(l_intLineNo);
        CLEAR(l_codeVendorSerialNo);
        CLEAR(l_codeServItemNo);
        CLEAR(l_codeItemNo);
        CLEAR(l_codeContractNo);
        CLEAR(l_codeNextRentContTemp);
        CLEAR(l_templateFromDB);
        CLEAR(l_TypeofRental);
        EVALUATE(l_codeContractNo,FORMAT(ADOrec.Fields.Item('cont').Value));
        EVALUATE(l_codeServItemNo ,FORMAT(ADOrec.Fields.Item('serviceitemno').Value));
        EVALUATE(l_intLineNo,FORMAT(ADOrec.Fields.Item('ContlineNo').Value));
        EVALUATE(l_codeVendorSerialNo ,FORMAT(ADOrec.Fields.Item('VendorSerialNo').Value));
        EVALUATE(l_intRentYear, FORMAT(ADOrec.Fields.Item('yr').Value));
        //l_intRentYear := l_intRentYear - 1;
        l_intRentYear := l_intRentYear;
        l_codeYear := FORMAT(l_intRentYear) +'Y';
        l_templateFromDB := FORMAT(ADOrec.Fields.Item('template').Value);
        l_TypeofRental := FORMAT(ADOrec.Fields.Item('TOR').Value);

        //EVALUATE(l_codeItemNo,FORMAT(ADOrec.Fields.Item('ItemNo').Value));

        g_recServiceContHeader.RESET;
        g_recServiceContHeader.SETFILTER("Contract No.",l_codeContractNo);
        IF  g_recServiceContHeader.FINDFIRST THEN
        BEGIN
          //get next Contract Template for rental contract
          l_codeNextRentContTemp := l_templateFromDB;

          l_dateContStartDate := CALCDATE(l_codeYear,CALCDATE('-1D',g_recServiceContHeader."Starting Date")); //generate PM start date

          l_dateContStartDateTemp := CALCDATE(l_codeYear,g_recServiceContHeader."Starting Date");

          l_recServContLine2.RESET;
          l_recServContLine2.SETFILTER("Contract No.",l_codeContractNo);
          l_recServContLine2.SETFILTER("Service Item No.",l_codeServItemNo);
          IF l_recServContLine2.FINDFIRST THEN
          BEGIN
            l_recServContLine2.CALCFIELDS("Civil Servant","Service Item Group Code","Template No.","Business Type");

            IF l_codeNextRentContTemp <> '' THEN
            BEGIN //Get the Next contract template for rental contract
        //////Generate Home Visit///////
              l_recServProSetup.RESET;
              l_recServProSetup.SETFILTER("No.",l_codeNextRentContTemp);

              //MESSAGE(l_TypeofRental);
              //MESSAGE(l_templateFromDB);
              //Start #014
              IF (l_TypeofRental = 'BIPAP(SUP)') AND
              ((l_templateFromDB = 'FREE 3M BIP RENT P02') OR (l_templateFromDB = 'FREE 3M VEN RENT P02')) THEN
                BEGIN
                  //MESSAGE('BINGO');
                  l_recServProSetup.SETFILTER(Type,'Home Visit 1|Home Visit 2|Home Visit 4')
                END
              ELSE
                BEGIN
                  //MESSAGE('BINGO2');
                  l_recServProSetup.SETFILTER(Type,'Home Visit 1|Home Visit 2|Home Visit 3|Home Visit 4|Home Visit 5');
                END;
              //END #014

              l_recServProSetup.SETFILTER("Start date",'<=%1',TODAY);
              l_recServProSetup.SETFILTER("End Date",'>%1',TODAY);
              l_recServProSetup.SETFILTER("Closing Date",'');
              IF (l_recServProSetup.FIND('-')) AND (l_codeNextRentContTemp <>'') THEN
              REPEAT
                l_recServFollowD.INIT;
                l_recServFollowD."Contract No." := g_recServiceContHeader."Contract No.";
                l_recServFollowD."Contract Line No." := l_intLineNo;
                l_recServFollowD."Service Item No." := l_codeServItemNo;
                l_recServFollowD."Vendor Serial No." :=  l_codeVendorSerialNo;
                l_recServCont.RESET;
                l_recServCont.SETFILTER("Contract No.",g_recServiceContHeader."Contract No.");
                l_recServCont.SETFILTER("Service Item No.",l_codeServItemNo);
                IF l_recServCont.FINDFIRST THEN
                BEGIN
                  l_recServFollowD."Service Item Group" := l_recServCont."Service Item Group Code";
                END;

                l_recServFollowD."Excepted PM Date" :=CALCDATE(l_recServProSetup.Period,l_dateContStartDate);
                l_recServFollowD."Service Type" := l_recServProSetup.Type;
                l_recServFollowD."Service Name" := l_recServProSetup.Name;
                l_recServFollowD."Program" := l_recServProSetup."Program";
                IF ((l_recServProSetup.Type = l_recServProSetup.Type ::"Home Visit 1") AND
                    (l_recServCont."Service Item Group Code" = 'CPAP'))THEN
                BEGIN
                   l_recServFollowD.VALIDATE("Prefered Next Call Date" ,DMY2DATE(31,12,2099));
                   l_recServContLine2.VALIDATE("Prefered Next Call Date" ,DMY2DATE(31,12,2099));
                   l_recServContLine2.MODIFY;
                END;

      l_recServFollowD2.RESET;
      l_recServFollowD2.SETFILTER("Contract No.",g_recServiceContHeader."Contract No.");
      l_recServFollowD2.SETFILTER("Contract Line No.",FORMAT(l_intLineNo));
      l_recServFollowD2.SETFILTER("Excepted PM Date",'=%1',CALCDATE(l_recServProSetup.Period,l_dateContStartDate));
      l_recServFollowD2.SETFILTER("Service Item No.",l_codeServItemNo);
      l_recServFollowD2.SETFILTER("Vendor Serial No.",l_codeVendorSerialNo);

      //------ IF(A) -----
      IF l_recServFollowD2.FIND('+') THEN
      BEGIN
        IF l_recServFollowD2."Replicate counter" <> 0 THEN
        BEGIN
          l_recServFollowD."Replicate counter" := l_recServFollowD2."Replicate counter" + 1;
        END
        ELSE
        BEGIN
           l_recServFollowD."Replicate counter" :=1;
        END
      END;
      CLEAR(l_replicateCounter);
      l_replicateCounter := l_recServFollowD."Replicate counter";
      //------ END IF(A) -----


      //Bug Fixing by Kenny - 15-9-2014 - Start
      //Check any PM Order has been closed by close reason "TMPOPT"
      l_recServFollowD3.RESET;
      l_recServFollowD3.SETFILTER("Contract No.",g_recServiceContHeader."Contract No.");
      l_recServFollowD3.SETFILTER("Contract Line No.",FORMAT(l_intLineNo));
      l_recServFollowD3.SETFILTER("Service Item No.",l_codeServItemNo);
      l_recServFollowD3.SETFILTER("Vendor Serial No.",l_codeVendorSerialNo);
      l_recServFollowD3.SETFILTER(Close, '=%1',TRUE);
      l_recServFollowD3.SETFILTER("Close Reason", 'TMPOPT');
      l_recServFollowD3.SETFILTER("Excepted PM Date", '=%1', CALCDATE(l_recServProSetup.Period,l_dateContStartDate));

      IF l_recServFollowD3.FINDFIRST THEN BEGIN
        //Check the PM Order has PM schedule that open
        l_recServFollowD4.RESET;
        l_recServFollowD4.SETFILTER("Contract No.",g_recServiceContHeader."Contract No.");
        l_recServFollowD4.SETFILTER("Contract Line No.",FORMAT(l_intLineNo));
        l_recServFollowD4.SETFILTER("Service Item No.",l_codeServItemNo);
        l_recServFollowD4.SETFILTER("Vendor Serial No.",l_codeVendorSerialNo);
        l_recServFollowD4.SETFILTER(Close, '=%1',FALSE);
        l_recServFollowD4.SETFILTER("Excepted PM Date", '=%1', CALCDATE(l_recServProSetup.Period,l_dateContStartDate));

        //Check the PM Order has PM schedule that close without close reason "TMPOPT"
        l_recServFollowD5.RESET;
        l_recServFollowD5.SETFILTER("Contract No.",g_recServiceContHeader."Contract No.");
        l_recServFollowD5.SETFILTER("Contract Line No.",FORMAT(l_intLineNo));
        l_recServFollowD5.SETFILTER("Service Item No.",l_codeServItemNo);
        l_recServFollowD5.SETFILTER("Vendor Serial No.",l_codeVendorSerialNo);
        l_recServFollowD5.SETFILTER(Close, '=%1',TRUE);
        l_recServFollowD5.SETFILTER("Close Reason", '<>%1', 'TMPOPT');
        l_recServFollowD5.SETFILTER("Excepted PM Date", '=%1', CALCDATE(l_recServProSetup.Period,l_dateContStartDate));

        IF (NOT l_recServFollowD4.FINDFIRST) AND (NOT l_recServFollowD5.FINDFIRST) THEN BEGIN
          l_recServFollowD."Replicate counter" := l_replicateCounter;
          l_recServFollowD.Close := FALSE;
          l_recServFollowD."Close Reason" := '';
          l_recServFollowD."Closing Date" := 0D;
          l_recServFollowD.INSERT(TRUE);
        END
      END
      ELSE BEGIN
        //Check the PM Order has PM schedule that open
        l_recServFollowD4.RESET;
        l_recServFollowD4.SETFILTER("Contract No.",g_recServiceContHeader."Contract No.");
        l_recServFollowD4.SETFILTER("Contract Line No.",FORMAT(l_intLineNo));
        l_recServFollowD4.SETFILTER("Service Item No.",l_codeServItemNo);
        l_recServFollowD4.SETFILTER(Close, '=%1',FALSE);
        l_recServFollowD4.SETFILTER("Vendor Serial No.",l_codeVendorSerialNo);
        l_recServFollowD4.SETFILTER("Excepted PM Date", '=%1', CALCDATE(l_recServProSetup.Period,l_dateContStartDate));

        //Check the PM Order has PM schedule that close without close reason "TMPOPT"
        l_recServFollowD5.RESET;
        l_recServFollowD5.SETFILTER("Contract No.",g_recServiceContHeader."Contract No.");
        l_recServFollowD5.SETFILTER("Contract Line No.",FORMAT(l_intLineNo));
        l_recServFollowD5.SETFILTER("Service Item No.",l_codeServItemNo);
        l_recServFollowD5.SETFILTER("Vendor Serial No.",l_codeVendorSerialNo);
        l_recServFollowD5.SETFILTER(Close, '=%1',TRUE);
        l_recServFollowD5.SETFILTER("Close Reason", '<>%1', 'TMPOPT');
        l_recServFollowD5.SETFILTER("Excepted PM Date", '=%1', CALCDATE(l_recServProSetup.Period,l_dateContStartDate));

        IF (NOT l_recServFollowD4.FINDFIRST) AND (NOT l_recServFollowD5.FINDFIRST) THEN BEGIN
          l_recServFollowD."Replicate counter" := l_replicateCounter;
          l_recServFollowD.Close := FALSE;
          l_recServFollowD."Close Reason" := '';
          l_recServFollowD."Closing Date" := 0D;
          l_recServFollowD.INSERT(TRUE);
        END
      END

      {
      l_recServFollowD3.RESET;
      l_recServFollowD3.SETFILTER("Contract No.",g_recServiceContHeader."Contract No.");
      l_recServFollowD3.SETFILTER("Contract Line No.",FORMAT(l_intLineNo));
      l_recServFollowD3.SETFILTER("Excepted PM Date",'=%1',CALCDATE(l_recServProSetup.Period,l_dateContStartDate));
      l_recServFollowD3.SETFILTER("Excepted PM Date",'=%1',CALCDATE('1D', CALCDATE(l_recServProSetup.Period,l_dateContStartDate)));
      l_recServFollowD3.SETFILTER("Service Item No.",l_codeServItemNo);
      l_recServFollowD3.SETFILTER("Vendor Serial No.",l_codeVendorSerialNo);
      l_recServFollowD3.SETFILTER(Close, '=%1',TRUE);
      //----- IF(C) -----
      IF NOT  l_recServFollowD3.FINDFIRST THEN
        BEGIN
                IF (NOT l_recServFollowD.GET(g_recServiceContHeader."Contract No.",l_intLineNo,
                    CALCDATE(l_recServProSetup.Period,l_dateContStartDate),0))
                    AND NOT
                    l_recServFollowD.GET(g_recServiceContHeader."Contract No.",l_intLineNo,
                    CALCDATE(l_recServProSetup.Period,l_dateContStartDateTemp),0)
                       AND
                    (CALCDATE(l_recServProSetup.Period,l_dateContStartDate) > DMY2DATE(31,12,2012)) THEN
                BEGIN
                  l_recServFollowD.INSERT(TRUE);
                  //MESSAGE('Success!');
                END
        END;
      }
      //Bug Fixing by Kenny - 15-9-2014 - End
      //----- END IF(C) -----


              UNTIL l_recServProSetup.NEXT = 0;

              //MESSAGE('BEGIN GEN CALL');

        /////Generate call/////
              l_recCustomer.GET(g_recServiceContHeader."Customer No.");
              l_recSalesInvHeader.RESET();
              l_recSalesInvHeader.SETFILTER("Order No.",g_recServiceContHeader."Sales Order No.");
              l_recSalesInvHeader.SETFILTER("Sell-to Customer No.",g_recServiceContHeader."Customer No.");
              IF l_recSalesInvHeader.FIND('-') THEN;
              l_recServProSetup2.RESET;
              l_recServProSetup2.SETFILTER("No.",l_codeNextRentContTemp);
              l_recServProSetup2.SETFILTER(Type,'Call 1|Call 2|Call 3|Call 4|Report');
              l_recServProSetup2.SETFILTER("Start date",'<=%1',TODAY);
              l_recServProSetup2.SETFILTER("End Date",'>%1',TODAY);
              l_recServProSetup2.SETFILTER("Closing Date",'');

              //----- IF(D) -----
              IF l_recServProSetup2.FIND('-') THEN
              REPEAT
              //MESSAGE(l_codeNextRentContTemp);
              //----- IF(F) -----
              IF l_recServProSetup2.Type = l_recServProSetup2.Type::"Call 1" THEN   ///Create Call 1
              BEGIN
                l_recFirstCallFollowUp.RESET();
                //MESSAGE(l_codeContractNo);
                l_recFirstCallFollowUp.SETFILTER("Contract No.",l_codeContractNo);
                l_recFirstCallFollowUp.SETFILTER("Call 1",FORMAT(CALCDATE(l_recServProSetup2.Period,l_dateContStartDate)));
                l_recFirstCallFollowUp.SETFILTER("Customer No.",g_recServiceContHeader."Customer No.");
                //----- IF(E) -----
                IF NOT l_recFirstCallFollowUp.FINDFIRST THEN  ///prenvent from duplicate insert
                BEGIN
                  l_recFirstCallFollowUp.INIT;
                  l_recFirstCallFollowUp.id := 0;
                  EVALUATE(l_recFirstCallFollowUp."Customer No." ,  FORMAT(g_recServiceContHeader."Customer No."));
                  EVALUATE(l_recFirstCallFollowUp."Installation Date" , FORMAT(g_recServiceContHeader."Starting Date"));
                  EVALUATE(l_recFirstCallFollowUp."Call 1" , FORMAT(CALCDATE(l_recServProSetup2.Period,l_dateContStartDate)));
                  EVALUATE(l_recFirstCallFollowUp."Order No." , g_recServiceContHeader."Sales Order No.");
                  EVALUATE(l_recFirstCallFollowUp."Program" , l_recServProSetup2."Program");
                  EVALUATE(l_recFirstCallFollowUp."Item No." , l_codeItemNo);
                  EVALUATE(l_recFirstCallFollowUp."Special Order Type" , FORMAT(g_recServiceContHeader."Special Order Type"));
                  EVALUATE(l_recFirstCallFollowUp."Salesperson Code",g_recServiceContHeader."Salesperson Code");
                  EVALUATE(l_recFirstCallFollowUp."Referral Contact",g_recServiceContHeader."Referral Contact");
                  l_recFirstCallFollowUp.VALIDATE("Customer No.");
                  //g_recFirstCallFollowUp.VALIDATE("Order No.");
                  l_recFirstCallFollowUp.VALIDATE("Program");
                  l_recFirstCallFollowUp.VALIDATE("Item No.");
                  l_recFirstCallFollowUp.INSERT(TRUE);
                 END
                //----- END IF(E) -----
              END;
              //----- END IF(F) -----
        ////Create Call 1-4////////
              l_recNewCarePlanFollowUp.RESET();
              l_recNewCarePlanFollowUp.SETFILTER("Customer No.",g_recServiceContHeader."Customer No.");
              l_recNewCarePlanFollowUp.SETFILTER("Contract No.",l_codeContractNo);
              l_recNewCarePlanFollowUp.SETFILTER(Type,FORMAT(l_recServProSetup2.Type));
              l_recNewCarePlanFollowUp.SETFILTER("Expected Call Date",FORMAT(CALCDATE(l_recServProSetup2.Period,l_dateContStartDate)));
              l_recNewCarePlanFollowUp.SETFILTER("Order No.",g_recServiceContHeader."Sales Order No.");
              //----- IF(G) -----
              IF NOT l_recNewCarePlanFollowUp.FINDFIRST THEN  ///prenvent from duplicate insert
              BEGIN
                l_recNewCarePlanFollowUp.INIT;
                l_recNewCarePlanFollowUp.VALIDATE(id,0);
                l_recNewCarePlanFollowUp.VALIDATE("Customer No.",g_recServiceContHeader."Customer No.");
                l_recNewCarePlanFollowUp.VALIDATE("Order No.",g_recServiceContHeader."Sales Order No.");
                l_recNewCarePlanFollowUp.VALIDATE("Customer Type" ,l_recCustomer."Customer Type 1" );
                l_recNewCarePlanFollowUp.VALIDATE("Referral No.",l_recSalesInvHeader."Referral Contact");
                l_recNewCarePlanFollowUp.VALIDATE("Referral Name",l_recSalesInvHeader."Referral Contact Name");
                l_recNewCarePlanFollowUp.VALIDATE("Department Code",l_recSalesInvHeader."Shortcut Dimension 2 Code");
                l_recNewCarePlanFollowUp.VALIDATE("Salesperson Code",l_recSalesInvHeader."Salesperson Code");
                l_recNewCarePlanFollowUp.VALIDATE("Special Order Type",l_recSalesInvHeader."Special Order Type");
                l_recNewCarePlanFollowUp.VALIDATE("Installation Date",l_recSalesInvHeader."Shipment Date");
                l_recNewCarePlanFollowUp.VALIDATE("Service Template Code",l_recServProSetup2."No.");
                l_recNewCarePlanFollowUp.VALIDATE(Type,l_recServProSetup2.Type);
                l_recNewCarePlanFollowUp.VALIDATE("Expected Call Date",
                  CALCDATE(l_recServProSetup2.Period,l_dateContStartDate));
                l_recNewCarePlanFollowUp.VALIDATE("Sales Invoice No.",l_recSalesInvHeader."No.");
                l_recNewCarePlanFollowUp.VALIDATE("Program",l_recServProSetup2."Program");
                l_recNewCarePlanFollowUp.INSERT(TRUE);
              END
              //----- END IF(G) -----
              UNTIL l_recServProSetup2.NEXT = 0;

            END
            //----- END IF(D) -----
           END

        END;
        ADOrec.MoveNext;
      END;

      CLEAR(ADOrec);
      ADOconn.Close;

      //Added by Kenny
      ClosePMOrdForSignedExpiryCont();
    END;

    PROCEDURE ClosePMOrdForSignedExpiryCont@1000000031();
    VAR
      l_recServFollowD@1000000000 : Record 50328;
      l_recServContLine2@1000000001 : Record 50320;
      l_nextMonth@1000000002 : Integer;
      l_currentYear@1000000003 : Integer;
      l_nextMonthLastDay@1000000004 : Integer;
      l_recServContH@1000000005 : Record 5965;
    BEGIN
      //Added by Kenny
      l_recServContH.RESET;
      l_recServContH.SETFILTER(Status, '%1|%2', l_recServContH.Status::Signed,
        l_recServContH.Status::Expired);
      l_recServContH.SETFILTER("Expiration Date", '<>%1&<%2', 0D, CALCDATE('-1M', TODAY));

      IF l_recServContH.FINDFIRST THEN BEGIN
      REPEAT
        l_recServContLine2.RESET;
        l_recServContLine2.SETFILTER("Contract No.", l_recServContH."Contract No.");
        l_recServContLine2.SETFILTER("Prefered Next Call Date", '%1', 0D);
        IF l_recServContLine2.FINDFIRST THEN BEGIN
          l_recServFollowD.RESET;
          l_recServFollowD.SETFILTER("Contract No.", l_recServContH."Contract No.");
          l_recServFollowD.SETFILTER(Close, '%1', FALSE);
          l_recServFollowD.SETFILTER("Excepted PM Date", '<>%1&>%2', 0D, CALCDATE('+1D', l_recServContH."Expiration Date"));

          IF l_recServFollowD.FINDFIRST THEN BEGIN
          REPEAT
            l_recServFollowD.Close := TRUE;
            l_recServFollowD."Closing Date" := TODAY;
            l_recServFollowD."Close Reason" := 'TMPOPT';
            l_recServFollowD."Modified Date" := TODAY;
            l_recServFollowD.MODIFY;
            COMMIT;
          UNTIL l_recServFollowD.NEXT = 0;
          END
        END
      UNTIL l_recServContH.NEXT = 0;
      END;
    END;

    PROCEDURE TestPostAndInsertNewCarePlan@1000000032();
    BEGIN

      // #015
      g_recSalesInvHeader2.RESET();
      g_recSalesInvHeader2.SETFILTER("Order No.", 'IN201505632');
      IF g_recSalesInvHeader2.FINDFIRST THEN
      BEGIN
        g_recNewCarePlanSchFollowup.InsertCarePlanSch(g_recSalesInvHeader2);
      END

      // #015
    END;

    PROCEDURE UpdateVendorSerialNo@1000000033();
    VAR
      l_recServItem@1000000000 : Record 5940;
      l_recServContL@1000000001 : Record 5964;
      l_recServContL2@1000000002 : Record 50320;
      l_recServContFUD@1000000003 : Record 50328;
    BEGIN
      //2015-12-10 Added by Kenny - Update Vendor Serial No. in Service Contract Line, Line 2 and Follow Up Detail automatically - Start
      l_recServItem.RESET;
      l_recServItem.SETFILTER("Current Active Contract No.", '<>%1', '');
      //IF l_recServItem.FINDFIRST THEN BEGIN REPEAT
      IF l_recServItem.FINDSET THEN BEGIN REPEAT
        l_recServItem.CALCFIELDS("Current Active Contract No.");
        l_recServContL2.RESET;
        l_recServContL2.SETFILTER("Contract No.", l_recServItem."Current Active Contract No.");
        l_recServContL2.SETFILTER("Service Item No.", l_recServItem."No.");
        l_recServContL2.SETFILTER("Vendor Serial No.", '<>%1', l_recServItem."Vendor Serial No.");
        IF l_recServContL2.FINDFIRST THEN BEGIN
          l_recServContL2."Vendor Serial No." := l_recServItem."Vendor Serial No.";
          l_recServContL2.MODIFY;
        END;

        l_recServContL.RESET;
        l_recServContL.SETFILTER("Contract No.", l_recServItem."Current Active Contract No.");
        l_recServContL.SETFILTER("Service Item No.", l_recServItem."No.");
        l_recServContL.SETFILTER("Vendor Serial No.", '<>%1', l_recServItem."Vendor Serial No.");
        IF l_recServContL.FINDFIRST THEN BEGIN
          l_recServContL."Vendor Serial No." := l_recServItem."Vendor Serial No.";
          l_recServContL.MODIFY;
        END;

        l_recServContFUD.RESET;
        l_recServContFUD.SETFILTER("Contract No.", l_recServItem."Current Active Contract No.");
        l_recServContFUD.SETFILTER("Service Item No.", l_recServItem."No.");
        l_recServContFUD.SETFILTER("Vendor Serial No.", '<>%1', l_recServItem."Vendor Serial No.");
        //IF l_recServContFUD.FINDFIRST THEN BEGIN REPEAT
        IF l_recServContFUD.FINDSET THEN BEGIN REPEAT
          l_recServContFUD."Vendor Serial No." := l_recServItem."Vendor Serial No.";
          l_recServContFUD.MODIFY;
        UNTIL l_recServContFUD.NEXT = 0;
        END;
      UNTIL l_recServItem.NEXT = 0;
      END;
      //2015-12-10 Added by Kenny - Update Vendor Serial No. in Service Contract Line, Line 2 and Follow Up Detail automatically - End
    END;

    PROCEDURE DeleteServHNoJBPMData@1000000034();
    VAR
      l_recServH@1000000000 : Record 5900;
      ADOconn@1000000005 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Connection";
      ADOrec@1000000002 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000535-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Recordset";
      SQLString@1000000001 : Text[1000];
    BEGIN
      //2016-03-21 Added by Kenny - Delete PM Data in TeleTrek Raw - Start
      l_recServH.RESET;
      //l_recServH.SETFILTER("Special Order Type", 'PM');
      l_recServH.SETFILTER("Customer No.", '%1', '');
      l_recServH.SETFILTER("No.", 'PM*');
      IF l_recServH.FINDFIRST THEN BEGIN
        IF ISCLEAR(ADOconn) THEN
          CREATE(ADOconn)
        ELSE
        BEGIN
          CLEAR(ADOconn);
          CREATE(ADOconn);
        END;

        IF ISCLEAR(ADOrec) THEN
        CREATE(ADOrec);

        ADOconn.ConnectionString:=
        'Driver={SQL Server}; Server=172.17.156.25; UID=celki; PWD=63M57by1+-';
        ADOconn.Open;

        {
        SQLString := 'DELETE FROM [Celki_PM].[dbo].[PMSaveDataOrder] as s';
        SQLString += 'inner join [Celki_PM].[dbo].[PMFullOrderData] as f on s.[serviceitemno] = f.[serviceitemno] ';
        SQLString += 'and s.[vendorserialno] = f.[vendorserialno] ';
        SQLString += 'and s.[contractno] = f.[contractno] ';
        SQLString += 'where f.[pmorderno] = '''+l_recServH."No."+'''';
        ADOconn.Execute(SQLString);

        SQLString := 'DELETE FROM [Celki_PM].[dbo].[PMFullOrderData] where [pmorderno] = ''';
        SQLString += l_recServH."No."+'''';
        ADOconn.Execute(SQLString);
        }

        SQLString := 'EXEC [celki_PM].[dbo].[ClosePMOrder]  @pmorderno =  '''+l_recServH."No."+'''';
        ADOrec.Open(SQLString, ADOconn, 3);

        ADOconn.Close;
        CLEAR(ADOconn);
        CLEAR(ADOrec);
      END;
      //2016-03-21 Added by Kenny - Delete PM Data in TeleTrek Raw - End
    END;

    PROCEDURE DeleteServHArchiveNoJBPMData@1000000035();
    VAR
      l_recServHArc@1000000000 : Record 50075;
      ADOconn@1000000003 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Connection";
      ADOrec@1000000002 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000535-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Recordset";
      SQLString@1000000001 : Text[1000];
    BEGIN
      //2016-03-21 Added by Kenny - Delete PM Data in TeleTrek Raw - Start
      l_recServHArc.RESET;
      //l_recServH.SETFILTER("Special Order Type", 'PM');
      l_recServHArc.SETFILTER("Customer No.", '%1', '');
      l_recServHArc.SETFILTER("No.", 'PM*');
      IF l_recServHArc.FINDFIRST THEN BEGIN
        IF ISCLEAR(ADOconn) THEN
          CREATE(ADOconn)
        ELSE
        BEGIN
          CLEAR(ADOconn);
          CREATE(ADOconn);
        END;

        IF ISCLEAR(ADOrec) THEN
        CREATE(ADOrec);

        ADOconn.ConnectionString:=
        'Driver={SQL Server}; Server=172.17.156.25; UID=celki; PWD=63M57by1+-';
        ADOconn.Open;

        {
        SQLString := 'DELETE FROM [Celki_PM].[dbo].[PMSaveDataOrder] as s';
        SQLString += 'inner join [Celki_PM].[dbo].[PMFullOrderData] as f on s.[serviceitemno] = f.[serviceitemno] ';
        SQLString += 'and s.[vendorserialno] = f.[vendorserialno] ';
        SQLString += 'and s.[contractno] = f.[contractno] ';
        SQLString += 'where f.[pmorderno] = '''+l_recServH."No."+'''';
        ADOconn.Execute(SQLString);

        SQLString := 'DELETE FROM [Celki_PM].[dbo].[PMFullOrderData] where [pmorderno] = ''';
        SQLString += l_recServH."No."+'''';
        ADOconn.Execute(SQLString);
        }

        SQLString := 'EXEC [celki_PM].[dbo].[ClosePMOrder]  @pmorderno =  '''+l_recServHArc."No."+'''';
        ADOrec.Open(SQLString, ADOconn, 3);

        ADOconn.Close;
        CLEAR(ADOconn);
        CLEAR(ADOrec);
      END;
      //2016-03-21 Added by Kenny - Delete PM Data in TeleTrek Raw - End
    END;

    BEGIN
    {
      2003/03/20 JH #1 - Copy Service Contract Line Dimension
      2003/04/01 ESG:Anita Lee
      #2 Renew Service Line should allow to be used on all "Special Contract Type"
      2003/06/19 JH #3 - Set Last Planned Service Date to Blank
      2003/09/01 JH #4 - Default Close Order Reason Code to RETURN for D/T/L
                    #5 - Default Return location to PPT if setup in Special Order Setup
      2003/10/06 JH #6 - In Copy Contract function, ignore comment lines
                    #7 - Reestablish Service Item - Customer link
      2003/11/04 JH #8 - Service Zone Code bug
                    #9 - Don't copy Prepaid & Skip first Invoice while copying
      2003/12/01 Celki #10 - Copy User ID to Return Order.
      2004/05/18 Celki #11 - Template No., Order Ref No.
      2006/04/13 Celki #12 - Shipment Date = WORKDATE + 1  (Required by Caren)

      ---TEC1.00---
      2010/05/04 MWU #001 - Code merge from 3.6
      2010/05/04 LLI #002 - M123: Carry PM Service Order (status <> pending) to new contract created
      //2010/05/04 LLI #003 - Change "Detailed Ledger" to "Allow Unbalanced Amounts"
      2010/05/15 LLI #004 - M148: Fine tuning sales return order creation
      2010/06/18 LLI #005 - M122: Add logic of Change Contract Add/Remove
      2010/06/24 LLI #006 - M124: Add logic of Process Rental To Sales
      2010/07/05 SFU #007 - Bring Type of Rental to Return Order
      2010/07/21 LLI #008 - Bring latest unit amount to exchange order
      2010/07/26 LLI #009 - Bring Type of Rental, Salesperson code to Return order
      2010/07/27 LLI #010 - Bring External Document No. to SO/SRO
                            When inserting Sales Line, do not update Sales Header's fields
      2010/08/08 LLI #011 - Fine tune #002
      2010/08/18 LLI #012 - M122: Add Bom Item when change contract
      2010/08/19 LLI #013 - M202: Process Trial/Demo to Rental
      2014/05/16 JOE #014 - BIPAP(SUP) in template FREE 3M VEN RENT P02, FREE 3M BIP RENT P02 need to remove Home visit 3, Home visit 5
      2015/10/22 JOE #015 - Testing Insert Line into New Care Plan by Post in Codeunit Sales-Post (80)
    }
    END.
  }
}

